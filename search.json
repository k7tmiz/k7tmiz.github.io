[{"title":"谈谈我为什么放弃了无纸化学习","url":"/posts/4fa1af2a.html","content":"\n如标题所见，我最终还是放弃了无纸化学习。这个决定并非一时兴起，而是经历了反复尝试与深刻反思之后的结果。很多人称赞数字化工具的便捷与环保，我也曾满怀期待地拥抱这一切，却发现它并不如想象中那般适合我。原因很多，听我一一道来。\n\n作为24年高考生，我高考结束以后便在网络上搜寻大学的高效率学习模式，然而作为一名文科生，电脑的使用率较低，而平板和手写笔成为了我的首选。\n\n刚进入大学的前两个星期，大约是新鲜期，那时候基本上使用率比较高，原因或许是内容强度不高，记忆难度小。直到大一上学期过完，回到学校以后，情况开始有所改变。\n\n大一下的内容强度逐渐上升，而我逐渐发现，使用平板的学习效率不升反降。电子产品给我这种不太自律的人来讲带来的干扰远高于帮助---消息通知，翻译时候的懒惰，甚至只是搜索一个东西，我的思绪就已经抽离出课堂了。而在纸上书写时，没有那么多顾虑，没有那么多干扰，注意力更持久。我逐渐明白，无纸化学习并不适合每一个人。真正的\"高效率\"学习不是看书时有多方便，而是看书的时候能看多久，能学进去多少。\n\n更重要的是，无纸化学习的过程让我的学习开始“走马观花”。这种虚拟的数字化“纸笔”并没有真实的书写触感，在屏幕上划重点，复制粘贴，直接截屏等操作，看似方便，实则丧失了主动吸纳的环节。相反，笔尖在纸上划过留下的沙沙声，迫使我去思考，归纳。一笔一划之间，知识不再是高高在上，划过眼前的信息，而转化成了实体，逐渐内化成我的东西。这种真实，踏实的感觉，是手写笔在屏幕上无法企及的地方。\n\n不仅如此，无纸化学习的体验也比较一般。大学的很多课本没有电子版，还是需要我背不少的书。扫描的代价也很大，麻烦并且不够清晰。最后不得不背---既没有方便，同时也不便携，每天依旧要背着装满课本的背包去上课，根本不可能只带一个平板。\n\n书写体验更是一坨。为了在这块玻璃屏幕上好好写字不打滑，我给过许多尝试。买过许多替代笔尖，许多笔尖套，类纸膜等等。所需开销比一本一笔高的很多，也并不自如。更不用说其他---购买时候的价格，触控笔，笔记会员，云存储的服务，累积下来性价比也并不高。书写的反馈也很弱很弱。\n\n我并非否认无纸化学习，存在即合理。但我认为时至今日，他也不一定适用于每一个学习者。对我而言，纸，是思考的空间；笔，是理解的延申。退回传统，并非倒退，而是选择了一条适合我的路。\n\n","tags":["Article"],"categories":["Article"]},{"title":"如何在Linux上优雅的使用小黄鸭","url":"/posts/5982c65e.html","content":"\n## 前言\n\n起因我在小黑盒看到了一个给SteamDeck开发的小黄鸭插件,然后我就想着Linux上面肯定也有\n\n插件:[decky-lossless-scaling-vk](https://github.com/xXJSONDeruloXx/decky-lossless-scaling-vk)\n\n我就去找了一下,真让我找到一个能在Linux上使用的小黄鸭插件,我立刻进行了尝试\n\n## 教程\n\n就是[lsfg-vk](https://github.com/PancakeTAS/lsfg-vk)项目\n\n这个项目把[Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/)这个项目引入了Linux\n\n#### 安装 (ArchLinux完全可用)\n\n**安装依赖**\n\n```\n$ sudo pacman -S base-devel git clang llvm cmake ninja spirv-headers vulkan-headers vulkan-icd-loader\n```\n\n**脚本安装**\n\n```\ncurl -sSf https://pancake.gay/lsfg-vk.sh | sh\n```\n\n#### Wiki\n\nhttps://github.com/PancakeTAS/lsfg-vk/wiki\n\n> 如果提示你DLL文件有问题找不到,首先你得去Steam购买[Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/),其次你可以安装在本地,这样你就不需要去再配置,如果你不想安装在Steam安装的位置,也可以修改 `~/.config/lsfg-vk/conf.toml` 配置文件进行配置\n\n```\nversion = 1\n[global]\n# override the location of Lossless Scaling\n# dll = \"/games/Lossless Scaling\"\n\n# [[game]] # example entry\n# exe = \"Game.exe\"\n# env = \"SteamDeck=0\"\n#\n# multiplier = 3\n# flow_scale = 0.7\n# performance_mode = true\n# hdr_mode = false\n#\n# experimental_present_mode = fifo\n# experimental_fps_limit = 48\n\n[[game]] # default vkcube entry\nexe = \"vkcube\"\n\nmultiplier = 4\nperformance_mode = true\n\n[[game]] # default benchmark entry\nexe = \"benchmark\"\n\nmultiplier = 4\nperformance_mode = false\n\n[[game]] # override Genshin Impact\nexe = \"Genshin\"\n\nmultiplier = 3\n```\n\n| Property | Recommended Value | Description |  |\n| :--------: | :-----------------: | :---------: | ---------- |\n| dll      | Path to `Lossless.dll` or empty | 如果您未将 Lossless Scaling 安装到传统目录中，则可以使用此属性覆盖游戏文件中 `Lossless.dll` 文件的路径 |  |\n| multiplier | (1, )2, 3, 4 | 将FPS 翻倍、三倍或四倍。想怎么高就怎么高。 |  |\n| performance_mode | true` or `false | 将帧生成模型切换为更轻的模型。这可以显著提高性能（速度在 2 到 8 倍之间，具体取决于分辨率）。质量略有下降 |  |\n| hdr_mode | 使用 HDR 时为 1 | 将着色器切换到 HDR 模式（不支持 scRGB）。不使用 HDR 时不要设置此标志 |  |\n#### 验证安装\n\n在没有 lsfg-vk 的情况下运行此程序，并在心中记下立方体旋转的速度：\n\n```\n$ DISABLE_LSFG=1 vkcube\n# (stop it with ctrl-c in the terminal, or Escape in the window)\n```\n\n接下来，再次运行此程序，看看立方体旋转速度是否变慢：\n\n```\n$ vkcube\n# (stop it with ctrl-c in the terminal, or Escape in the window)\n```\n\n> 默认配置允许在 vkcube 上生成 4 倍帧。如果多维数据集没有明显减慢速度，则表示您没有正确安装 lsfg-vk\n\n\n\n#### 使用方法\n\n在你需要使用的Steam游戏的启动选项上加上 `ENABLE_LSFG=1` \n\n例如: `ENABLE_LSFG=1 gamemoderun %command%` \n","categories":["Linux"]},{"title":"在Linux上优雅的使用Wemod","url":"/posts/400b687c.html","content":"\n## 引言\n\n最近在玩Escape the backroom,里边那个耐力真的很难受,所以开了个无限耐力的,但是我不想在windows下游玩,我就去找了一下linux下的wemod的替代品,结果找到了这个项目[wemod-launcher](https://github.com/DeckCheatz/wemod-launcher),现在想写一篇博客介绍一下怎么使用它\n\n## 教程\n\n首先我们需要一个 `Python容器` ,在linux下我使用的是 `python-venv` 以下演示基于ArchLinux\n\n#### 1. 先装所需的依赖包\n\n```\nsudo pacman -Sy tk\n```\n\n然后把项目拉到本地\n\n```\ngit clone https://github.com/DeckCheatz/wemod-launcher.git\n```\n\n创建一个虚拟容器\n\n```\npython -m venv wemod-launcher\n```\n\n切换\n\n```\nsource wemod-launcher/bin/activate.fish\n```\n\n> 因为我用的是fish所以这里用.fish,如果\n\n这时你的python容器和wemod容器在同一个文件夹中\n\n#### 2.  GE-Proton\n\n建议使用GE-Proton,通过 `Protonup-qt` 来安装GE-Proton\n\n```\nyay -S protonup-qt\n```\n\n### 3. 重启\n\n```\nreboot\n```\n\n#### 4. 准备\n\n先查看 `wemod-launcher` 的目录\n\n```\nreadlink -f wemod-launcher\n```\n\n改成可执行权限\n\n```\nchmod -R ug+x wemod-launcher\n```\n\n#### 5. 更改设置\n\n- 在Steam库中,兼容性选项中,强制使用你刚才下载的GE-Proton版本\n\n- 在 `Launch Options （启动选项 `） 下，输入 `{path/to/wemod-launcher}/wemod %command%`\n\n#### 6. 开游戏\n\n- 如果 “copy prefix question” 出现并显示 `might work` ，请选择 “no”\n\n- 如果它提到 `可能有效` （或更好），就可以直接安全地忽略所有 rundll32.exe 错误（通过单击 `no`）\n\n- 选择 `Download` \n- 选择 Yes/Ok 直到不再显示窗口\n\n- 可以安全地忽略所有 rundll32.exe 错误（通过单击 `no`）\n\n> Wemod应该能启动了\n\n#### 7. 登录Wemod (仅一次)\n\n####  现在你应该就可以正常使用你的Wemod来爽快的进行游戏了\n\n> 遇到问题请自行查看: [Config Usage](https://github.com/DeckCheatz/wemod-launcher/wiki/Config-Usage)\n","tags":["Linux","Tech"],"categories":["Linux"]},{"title":"在Linux上优雅的使用Zotero","url":"/posts/9ccc8650.html","content":"## 引言\n由于我选的一个课需要我现在大一就写论文，我就在寻找在Linux上的文献管理方案。在gitee上找到了一个项目[Zotero-WPSJS](https://gitee.com/wangrui5015/Zotero-WPSJS)\n\n感谢大佬的付出\n\n## 教程\n- 安装\n- Clone项目\n- 安装插件\n- Chrome插件(可选)\n\n### 安装\n首先在你使用的发行版上安装Zotero\n\nArch:\n```\nyay -S zotero-bin\n```\n\nFlatpak(没有尝试过，不确保可用):\n```\nflatpak install flathub org.zotero.Zotero\n```\n\n### Clone项目\n[Zotero-WPSJS](https://gitee.com/wangrui5015/Zotero-WPSJS)\n```\ngit clone https://gitee.com/wangrui5015/Zotero-WPSJS.git\n```\n\n挂载进目录，然后\n\n### 安装插件\n安装\n```\npython install.py\n```\n\n![](../../images/Zotero/a.png)\n\n**WPS中的效果：**\n> 记得按提示给JS插件权限\n\n![](../../images/Zotero/b.png)\n\n### Chrome插件(可选)\n\n![](../../images/Zotero/c.png)\n","tags":["Linux","Tech"],"categories":["Linux"]},{"title":"KDE美化教程","url":"/posts/a3d041ec.html","content":"\n## 前言\nKDE是我接触Linux以来接触的较早，并且最多的一个桌面环境了。几乎每次安装所有系统，我都是首选KDE\n\n原因就在于其友好，强大，美观，操作逻辑简单。\n\n再离开Linux这一年，没想到已经更新到了KDE6，刚回归的时候也走了一些弯路，现在我将制作一个教程以便自己的使用，也欢迎大家参考！\n\n## 效果\n\n![](../../images/KDE/a.png)\n\n插件极少，相对来讲确实有点macOS那个感觉？\n\n## 教程\n\n### Dock\n\n#### 底部dock\n\n![](../../images/KDE/b.png)\n\n启动器图标:[archlinux-artwork](https://github.com/JotaRandom/archlinux-artwork)\n#### 顶部应用程序菜单栏\n\n![](../../images/KDE/c.png)\n**顶部按顺序**\n\nbar-全局菜单-间距-系统托盘-数字时钟-搜索-注销\n\n插件就两个，一个是 `Panel colorizer` 另一个是 `Application Title Bar` 都可以在KDE自带的官方插件商店找到\n\n#### Panel colorizer改底部dock,背景去掉\n\n#### Application Title Bar设置如下\n\n![](../../images/KDE/d.png)\n![](../../images/KDE/e.png)\n\n### 系统配色\n\n就这个 [WhiteSur-kde](http://github.com/vinceliuice/WhiteSur-kde)\n\n系统设置中---颜色与主题\n- 全局主题我选的Breeze微风\n- 颜色和Plasma外观样式我选择的是WhiteSur-alt 苹果\n\n### 特效\n\n系统设置中---窗口管理---桌面特效\n- 惯性晃动\n- 粉碎动画\n- 背景虚化\n![](../../images/KDE/g.png)\n- 窗口透明度\n> 这个之前调的时候好像有bug？反正我没动\n- 最小过渡动画-神灯\n- 窗口后滑动效\n\n### 终端\n\n![](../../images/KDE/h.png)\n\n终端字体：[点击下载](../../files/ttf.zip)\n\nref: [nerd-fonts](https://github.com/ryanoasis/nerd-fonts)\n\nneofetch配置文件[点击下载](../../files/neofetch)\n里边的内容替换 `~/.config/neofetch/config.conf` \n![](../../images/KDE/i.png)\nref: [neofetch-themes](https://github.com/Chick2D/neofetch-themes)\n\n### 壁纸\n鄙人倒是收集了一些壁纸，可以直接clone下来\n```\ngit clone https://github.com/k7tmiz/WallPaper.git\n```\n\n---\n\n以后还能想起啥再补吧...\n","categories":["Linux"]},{"title":"KDE崩溃了怎么办","url":"/posts/fff51a63.html","content":"## 起因\n因为这个Wallpaper Engine暂时没有适配Linux端，所以我就一直在用这个第三方的插件\n> 因为SteamOS也是基于ArchLinux的，那我用Arch的，拿儿子点东西不过分哈\n\nref： [SteamOS-wallpaper-engine-kde-plugin](https://github.com/slynobody/SteamOS-wallpaper-engine-kde-plugin?tab=readme-ov-file)\n\n然后有的壁纸用了会崩溃死机，以下几条命令或许能帮到你\n\n> 我已经全面迁移到了Wayland环境，如果用X11,请自行类比或退出自行搜索哈\n\n## 开始\n\n#### 重启kwin\nKDE桌面按下 `Alt+Space` 输入：\n```\nkwin_wayland --replace\n```\n\nkwin就会重启，这时百分之八十的问题都能解决掉\n\n#### 还是不行？Plasma Shell崩溃了？？\n\n如果在KDE桌面可以通过快捷键 `Ctrl+Alt+T` 快速打开 `Konsole`\n\n或者 `Alt+Space` 然后搜索 `Konsole` 打开也可以\n\n以下命令重启 `plasmashell`\n```\nkstart5 plasmashell\n```\n\n有挂起的进程就先 `kill` 掉，再重启：\n```\nkillall plasmashell && kstart5 plasmashell\n```\n\n#### KDE小组件崩溃了？\n\n重启解决百分之九十九的问题\n\n```\nkillall plasmashell && kstart5 plasmashell\n```\n\n```\nreboot\n```\n\n**以上方法简单粗暴，懵逼不伤脑**\n\n**祝好运**","tags":["Linux"],"categories":["Linux"]},{"title":"GIT提交时不用输入用户名密码的方法","url":"/posts/87bb185d.html","content":"\n## 起因\n每次git push都要用用户名和密码，每次都要去复制一下然后粘贴过去... 是真的很烦人\n\n## 教程\n1. 进入项目的目录:以Hexo举例\n\n```\ncd Hexo\n```\n\n2. 输入以下命令:\n```\ngit config credential.helper store\n```\n\n> 也可以加上 `--global` 只对全局生效，不带就是只对当前库生效\n\n3. `.git` 文件夹下的 `.config` 文件应该多了两行\n```\n[credential]\n\thelper = store\n```\n\n4. `git push` 到远程仓库，**输入正确的用户名和密码**\n\n5. 再次运行 `git push` 就不需要用户名密码了\n\n6. 回到用户主目录发现多了一个 `.git-credentials` 这个就是用来存储用户名和密码的\n\nref: [GIT提交时不用输入用户名密码的方法](https://blog.csdn.net/q1054261752/article/details/126389400)","categories":["Tech"]},{"title":"Git 常用命令详解","url":"/posts/c819bd8f.html","content":"# Git 常用命令介绍\n\nGit 是一个分布式版本控制系统，广泛用于软件开发中的代码管理。以下是一些常用的 Git 命令，按照逻辑顺序和常用次序进行介绍，帮助您更好地理解和使用 Git。\n\n## 1. git clone\n\n**git clone** 用于从远程仓库克隆一个项目到本地。这是您开始使用 Git 项目时的第一步。\n\n- **常规用法**：\n  ```bash\n  git clone <repository_url>\n  ```\n- **说明**：`<repository_url>` 是远程仓库的 URL，克隆后会在本地创建一个与远程仓库同名的目录，并下载所有文件和提交历史。\n\n## 2. git add\n\n**git add** 用于将工作区的更改添加到暂存区，准备进行提交。\n\n- **常规用法**：\n  ```bash\n  git add <file>\n  ```\n- **说明**：`<file>` 是您要添加的文件或目录。可以使用 `git add .` 将所有更改添加到暂存区。\n\n## 3. git commit\n\n**git commit** 用于将暂存区的更改提交到本地仓库，并记录提交信息。\n\n- **常规用法**：\n  ```bash\n  git commit -m \"提交信息\"\n  ```\n- **说明**：`-m` 选项后跟提交信息，描述本次提交的更改内容。\n\n## 4. git push\n\n**git push** 用于将本地的提交推送到远程仓库。\n\n- **常规用法**：\n  ```bash\n  git push origin <branch_name>\n  ```\n- **说明**：`origin` 是远程仓库的名称，`<branch_name>` 是要推送的分支名称。\n\n## 5. git pull\n\n**git pull** 用于从远程仓库拉取最新的更改并合并到本地仓库。\n\n- **常规用法**：\n  ```bash\n  git pull origin <branch_name>\n  ```\n- **说明**：`origin` 是远程仓库的名称，`<branch_name>` 是要拉取的分支名称。\n\n## 6. git remote\n\n**git remote** 用于管理远程仓库，例如查看、添加或删除远程仓库。\n\n- **常规用法**：\n  - 查看远程仓库：\n    ```bash\n    git remote -v\n    ```\n  - 添加远程仓库：\n    ```bash\n    git remote add <name> <url>\n    ```\n  - 删除远程仓库：\n    ```bash\n    git remote remove <name>\n    ```\n- **说明**：`<name>` 是远程仓库的名称，`<url>` 是远程仓库的 URL。\n\n## 7. git reset\n\n**git reset** 用于重置暂存区或工作区的状态，常用于撤销更改。\n\n- **常规用法**：\n  - 撤销暂存区的更改：\n    ```bash\n    git reset <file>\n    ```\n  - 撤销提交（软重置）：\n    ```bash\n    git reset --soft <commit>\n    ```\n  - 撤销提交并重置工作区（硬重置）：\n    ```bash\n    git reset --hard <commit>\n    ```\n- **说明**：`<file>` 是要重置的文件，`<commit>` 是要重置到的提交哈希或引用。\n\n## 8. git merge\n\n**git merge** 用于合并分支，将一个分支的更改合并到当前分支。\n\n- **常规用法**：\n  ```bash\n  git merge <branch_name>\n  ```\n- **说明**：`<branch_name>` 是要合并的分支名称。\n\n## 9. git rm\n\n**git rm** 用于删除文件并将删除操作添加到暂存区。\n\n- **常规用法**：\n  ```bash\n  git rm <file>\n  ```\n- **说明**：`<file>` 是要删除的文件。删除后需要使用 `git commit` 提交更改。\n\n## 10. git rebase\n\n**git rebase** 用于变基，将一个分支的提交历史应用到另一个分支的顶部，常用于整理提交历史。\n\n- **常规用法**：\n  ```bash\n  git rebase <base_branch>\n  ```\n- **说明**：`<base_branch>` 是要变基到的基础分支。\n\n---\n\n以上是 Git 的一些常用命令及其常规用法。掌握这些命令将帮助您更高效地管理代码版本和协作开发。\n\n**以上内容由AI整理**","tags":["Linux","Tech"],"categories":["Tech"]},{"title":"关于Spotify桌面端的美化","url":"/posts/4795de82.html","content":"\n## 简单的开头：为什么我切换到了Spotify\n前两天，我收到了一条短信\n![](../../images/Spicetify/a.png)\n\n由于Linux端的网易云已经年久失修，最新的一个官方包大概是七八年前维护的，无论是功能性还是美观度都无法支撑我继续使用。wine模拟出的官方版有时候占用也比较高，Splayer就成为了我的首选。\n\n据说是因为这个 `听歌打卡` 的功能，但我也不好说到底是不是这个原因...\n![](../../images/Spicetify/c.png)\n\n于是我就投入了Spotify的怀抱\n\n其实很早之前就在用mod版本，但是经过这么一出，没忍住直接冲了年会员\n![](../../images/Spicetify/b.png)\n\n而且Spotify的推荐算法简直无敌，歌库也很全，多端同步也超级无敌，一年价格也能接受，Linux端也有很多东西可玩，那我就来了\n\n## 安装Spotify\n\n### ArchLinux\n```\nsudo pacman -S spotify-launcher\n```\n\n### Flatpak\n[Spotify](https://flathub.org/apps/com.spotify.Client)\n```\nflatpak install flathub com.spotify.Client\n```\n\n\n## Spicetify插件\n\n原生的Linux版本的Spotify也太丑了...\n\n于是我就去网上找类似的插件，意图稍微的美化一下\n\n官网：[Spicetify](https://spicetify.app/)\n\n### 安装\n由于我是Linux端，所以直接：\n```\ncurl -fsSL https://raw.githubusercontent.com/spicetify/cli/main/install.sh | sh\n```\n\n问你要不要安装 `Marketplace` 直接Y\n\n然后安完了应该是提示你\n```\nspicetify backup apply\n```\n\n这里**Flatpak**版本还要多一步加权限，否则 `spicetify backup apply` 会运行失败\n\n```\nsudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/\n```\n\n```\nsudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/Apps -R\n```\n\n> 还有可能会提示你 `spotify_path` 或者 `prefs_path` 有问题，你只需按照它的提示找到那个 `~/.config/spicetify/config-xpui.ini` 文件然后修改即可\n\n参考：[Installation](https://spicetify.app/docs/advanced-usage/installation/)\n\n至此应该就是安好了\n\n### 美化\n\n进来点上面的购物车按钮，安装以下几个：\n\n扩展我只装了这个\n\n![](../../images/Spicetify/d.png)\n\n装别的主题之前似乎都得装这个...\n\n![](../../images/Spicetify/e.png)\n\n然后我用的这个 `Lucid`\n\n![](../../images/Spicetify/f.png)\n\n最后就这两个小东西\n\n![](../../images/Spicetify/g.png)\n\n---\n\n## 效果\n\n![](../../images/Spicetify/h.png)\n\n![](../../images/Spicetify/i.png)\n\n\n","tags":["Linux","Tech"],"categories":["Tech"]},{"title":"记录我电脑外放消失的一次","url":"/posts/8c7c6a2b.html","content":"\n**很偶然的发现**\n\n## 起因\n\n起因是我要做pre,然后昨天晚上十二点半去楼道的自习室加班加点，然后当时刚好忘记带耳机了，大半夜也没什么人，我就打算外放了，然后没声音，我还以为是系统bug,重启了一下，发现还是没声，没管它接着弄了...回到宿舍插上耳机又有声音了？？？\n\n到这我还不是很确定...\n\n然后第二天中午回来发现还是不行，我就打算排除法，因为我是多Linux➕Win的配置，我从Arch出去先进了Fedora,发现还是没声。我就排除系统问题了。然后又进Win发现还是一样没声。最后进了SUSE，这个我当时所有系统都崩了就它没事的超稳定系统，同样不能用...\n\n我就用了很多命令然后发现，硬件都是正常的？？？我就觉着可能是硬件坏了。但是插上耳机还是有音频输出，jack detect也没问题，就是外放不了？？\n\n然后管不了那么多了，我着急用pre,匆忙做完下午去上专业课了。\n\n下了专业课回到寝室接着排查，然后最终决定放弃，不带电脑去中心上课了。\n\n然后下课回来路上刷到一篇帖子，说是静电问题，回来放了一下静电就好了...\n\n\n## GPT的建议\n\n电脑本身在正常使用中不会频繁积累危险级别的静电（ESD），但定期给电脑**释放静电**可以降低潜在的硬件风险，尤其是在以下几种情况下：\n\n---\n\n### ✅ **建议给电脑释放静电的时机**\n\n1. **更换或安装硬件前（如加内存、换硬盘）**\n\n   * **必须*释放静电，否则有可能损坏主板、内存或其他敏感元件。\n\n2. **电脑出现异常问题，如：**\n\n   * 无法开机、USB设备识别异常、扬声器无声、电源灯亮但无反应；\n   * 这些可能是“软性静电锁定”导致主板处于保护状态。\n\n3. **长时间未关机、处于待机状态超过一周时**\n\n   * 有时电荷会在电源线路中缓慢积累。\n\n4. **环境干燥、冬天、穿化纤衣服经常接触电脑**\n\n   * 更容易产生人体静电放电。\n\n---\n\n### 🕓 **多久放一次静电比较合适？**\n\n* **日常使用：**\n  不需要频繁释放，一般**每月一次或每次电脑出现异常时操作即可**。\n\n* **高风险环境（冬季/干燥/有明显静电打火感）：**\n  每周一次或者每次使用前摸一下金属物体（如桌脚或插排外壳）做人体放电。\n\n---\n\n### ⚙️ **如何给电脑释放静电？**\n\n#### 台式机：\n\n1. 完全关机并**拔掉电源线**；\n2. **按住电源键不松手 10\\~30 秒**，让主板和电源的余电释放；\n3. 如果还要打开机箱操作，建议佩戴防静电手环或触摸金属机箱外壳。\n\n#### 笔记本电脑：\n\n1. 关机 → 拔掉充电器；\n2. 如可拆卸电池，先**拔电池**；\n3. 同样**长按电源键 10\\~30 秒**；\n4. 再重新装好电池或接上电源即可。\n\n---\n\n### ✅ 总结\n\n| 情况       | 建议释放静电频率    |\n| -------- | ----------- |\n| 日常无异常使用  | 每月一次或无需频繁操作 |\n| 干燥环境、静电多 | 每周一次        |\n| 换硬件、电脑异常 | 当次操作前务必释放   |\n\n如果你电脑近期频繁出现扬声器无声、USB异常等问题，建议你现在就做一次释放静电操作试试，看是否能解决问题。","tags":["Tech"],"categories":["Tech"]},{"title":"高考一年后有感","url":"/posts/e74fd7e6.html","content":"\n## 防喷设置\n\n鄙人的文笔不是十分优秀，博客只是写给自己看的...\n\n## 回忆\n今天是2025年5月29号，翻开回忆角落，疲惫的生活...\n\n打开自己的相册，看到了5月29号当天自己相册的内容\n- 凌晨的我对着一根笔拍了一张照，照片中的笔芯用胶带裹上作为标记，其展示出了当时我一支笔狠狠学一天能用多少。高三那会的我确实很喜欢买各种各样的笔\n- 晚上9：25,一张照片关于我们高中语文年级组汇编的高三语文试题本，封面被我很好的朋友用各种各样颜色的笔，大大小小写满了我的名字...就不放出来了，保护自己的隐私\n\n其实现在的我已经想不起什么高中的很多事情了，能记起的只有回忆起来的美好瞬间和高三最后那段时间自己的努力。\n\n庆幸的是，即使我考到了四川，我和曾经的好友，仍然保持着联系。\n\n真要我说的话，谁又会没点遗憾呢... 走曲\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=2144209098&auto=0&height=66\"></iframe>\n\n我写这篇的时候距离25年高考还有不到九天，这一年过的真的挺快的，我也适应了很多，成长了许多...\n\n真要说考出北京有什么好处，我想可能是周围并没有那么多你熟悉的同学，或许对于我来讲，平常做事不必太束手束脚了。谁都不欠谁的。\n\n没想到时间过的这么快，我马上都大二了...今日清理相册，指尖触到一张模糊的照片——是当年高考的准考证提示。想来是当时太过激动，镜头都不由得晃动。此刻再看，那股回忆竟压得我心口沉甸甸...\n\n我的记忆瞬间被拉回：五六月的北京，天气很好。我们即将要面临高考，无心顾暇。我埋首于书山题海，只觉时间粘滞如蜜糖，缓慢得令人窒息。桌上那块橡皮，不知何时已被时光悄然啃噬，磨成了细碎的一小粒，散落如微茫的雪。那时心中焦灼翻腾，唯一的念头便是挣脱这千篇一律的煎熬，去远方，去瞧瞧大海的模样。\n\n而当时间终于走完了刻度，24年6月11日的凌晨，我与两位挚友并肩站在渤海边。海风裹挟着咸腥扑面而来，我们静默着，看那轮红日磅礴跃出海平线，将天空与海水一同点燃。那一刻，才猛地惊觉：一切，真的结束了...\n\n那段当时只道是寻常的朝暮，竟如此清晰地烙印在心底——那书页翻动的窸窣，笔尖摩擦的沙沙，连同那粒橡皮的碎屑，原来都是青春自身投下的浓重侧影，已沉沉地、永远地锚定在那里。\n\n人生最是奇诡：曾日夜渴盼挣脱的樊笼，到头来竟成了灵魂归途最清晰的坐标；那些当时以为冗长无尽的煎熬，如今却化作心上最隽永的印痕——如同铅笔在纸面深深刻下的字迹，时光流转，反被岁月擦得愈发清晰、透亮...\n\n\n加油2025年高考的同学，前程似锦，不留遗憾\n\n---\n\n拍摄于2024.6.6日12：59\n\n![2024.6.6](../../images/Gaokao/a.png \"2024.6.6\")\n\n拍摄于2024.6.10日晚21:02\n>我们仨一拍脑门，高考完当天晚上就到了天津的滨海新区，准备第二天看日出\n\n![](../../images/Gaokao/b.png)\n\n","tags":["Article"],"categories":["Article"]},{"title":"因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项","url":"/posts/5618ea3e.html","content":"\n之前我发布了一篇[学习计时器](https://k7tmiz.com/posts/f78c38a6.html#more)的文章,当时上传的音频我没注意体积有多大，是在`hexo d`这一步没有成功, warning警告说“GitHub建议上传最大体积为50MB, 上限为100MB”, 很明显我上传的音频文件体积已经超过了100MB. 因此我删掉了那个大文件, 但是当我再次尝试部署时, 还是弹出来一样的warning, 报错文件的路径也和之前的一样, 可是我明明已经删除了那个文件, 后来经过不断的尝试以及在网上搜索, 我找到了一篇和我遇到问题一样的情况[因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项](https://ultrafisher.github.io/2020/09/06/%E5%9B%A0%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E8%80%8C%E5%AF%BC%E8%87%B4hexo%E9%83%A8%E7%BD%B2%E6%97%B6Spawnfailed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/) 这里再在自己的博客上做一个记录：\n\n## 首先恢复仓库文件\n\n```\ncd .deploy_git\n```\n\n## 然后找到自己的 `commitid`\n```\ngit log\n```\n\n## 接着输入命令：\n```\ngit reset --hard `commitid`\n```\n\n按理来说应该就没有问题可以正常 `hexo d` 了\n","tags":["Tech"],"categories":["Tech"]},{"title":"学习计时器","url":"/posts/f78c38a6.html","content":"## 学习方法介绍\n\n大概是90min学习后再休息20min，\n\n在这90min中，设置一个在3-5分钟内就会响一声的闹钟\n\n响一声后适当闭眼休息十秒\n\n然后再继续学习，循环往复...\n\n## 音频\n\n由于音频文件太大，本座决定把bilibili视频直接搬过来...嘻嘻\n\n{% mmedia \"bilibili\" \"bvid:BV1X9Lmz1EEr\" %}\n\n\n## 主页也有计时器版本：\n\n![](../../images/Studytimer/a.png)\n\n点进去以后：\n\n![](../../images/Studytimer/b.png)\n\n弃用的原因很简单，因为浏览器会杀后台，所以计时不准确。不过如果一直保持前台，它是完全可用的！\n\nref： [「随机提示音」视频版（可以在后台播放）](https://www.bilibili.com/video/BV1X9Lmz1EEr/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=858cf37c77b85a33717e40172534293a)","tags":["Study"],"categories":["Study"]},{"title":"Linux使用Wayland协议下微信无法正常调用Fcitx5的中文输入法解决办法","url":"/posts/ac1a683e.html","content":"\n## 我的环境\n我在用ArchLinux的时候没有遇到这个问题，但是今天突发奇想，想在Fedora42+KDE+Wayland上打游戏的时候，发现自己的微信无法正常调用fcitx5的中文输入法，故来这里记录分享一下自己的经验\n\n废话不多说，直接上图！\n![](../../images/Fcitx5wx/a.png)\n\n添加环境变量：\n```\nQT_SCALE_FACTOR=1.5 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx\n```\n\n第一个是缩放，因为楼主的电脑是HiDPI屏幕，所以需要缩放1.5倍。后两个就是配置fcitx5的工具，亲测可用！","tags":["Linux","Tech"],"categories":["Linux"]},{"title":"如何在Linux下优雅的使用网易云音乐","url":"/posts/e85c1bad.html","content":"\n## 目前我所知晓的方法有几种\n\n- 网页端网易云\n- 用electron封装网页版\n- 第三方客户端(如yesplayer,splayer等)\n- 下载到本地用音乐播放器播放\n- 用wine安装Windows版本\n\n>这里网页端的使用方法就不多赘述了，直接点击 [网易云音乐](https://music.163.com/) 便可进入网页端\n\n## 这里我们说说后几种方法\n\n### 首先用electron封装\n\n不要害怕，我其实有写过一篇帖子来介绍怎么使用一个工具名叫 `Nativerfier` 的封装工具\n\n帖子如下： [Nativefier 使用教程](https://k7tmiz.com/posts/b56059f9.html)\n\n我没有尝试过把网易云网页版封装成electron程序，我其实更推荐后几种方案...\n\n### 第三方客户端\n\n以Arch Linux为例 我推荐以下几个App(按顺序)：\n\t\n1. Splayer 项目地址：[Splayer](https://github.com/imsyy/SPlayer)\n\t\n\t```\n\tyay -S splayer-git\n\t```\n\t\n\n一款极其简约好用的音乐播放器，功能丰富操作简单直接，多系统可用，我就通过的AppImage来进行了安装，当然它也被收录到了AUR，我十分喜爱这款软件！\n\n2. FeelUOwn 项目地址：[FeelUOwn](https://github.com/feeluown/FeelUOwn)\n\t\n```\nyay -S feeluown          # 安装稳定版，最新版的包名为 feeluown-git\nyay -S feeluown-netease  # 按需安装其它扩展\nyay -S feeluown-ytmusic\nyay -S feeluown-bilibili\n```\n\n\n一个稳定、用户友好以及高度可定制的音乐播放器。基于文本的歌单，方便与朋友分享、设备之间同步。一键安装，各流行平台均有打包（如 Arch Linux, Windows, macOS 等）但是在我的Arch上使用，会出现网易云无法正常登录的情况，我不知道是个例还是什么情况...但是我仍然认为他的可拓展性很强，值得一个第二\n\t\n3. YesPlayMusic 项目地址：[YesPlayMusic](https://github.com/qier222/YesPlayMusic)\n\n```\nyay -S yesplaymusic\n```\n\n高颜值的第三方网易云播放器，支持 Windows / macOS / Linux ，是我第一款开始使用的软件，问题是偶尔会掉线，然后颜值很高，很简约，但是作者似乎不咋打算更新新功能了，包会有点旧，介意的选前两个(我三个都要😋)\n\t\n---\n\n### 下载到本地然后用播放器不用过多赘述了\n\n---\n### 接下来用讲讲如何wine安装Windows版本的网易云\n\n#### 优势：体验完美，功能齐全，不用担心掉号，不用担心被检测第三方等等，还有HiDPI支持\n\n#### 劣势：配置麻烦，转译后可能会有一定的性能损耗\n---\n#### 效果如下：\n\n![](../../images/CloudMusicOnLinux/a.png)\n\nKDE的系统托盘也能正常识别使用\n\n![](../../images/CloudMusicOnLinux/b.png)\n\n#### 开始教学：\n\n首先Arch的话通过AUR安装 `bottles` 这个包\n```\nyay -S bottles\n```\n\nFlatpak通过这个命令安装\n```\nflatpak install flathub com.usebottles.bottles\n```\n\n安装好以后打开它，等加载一会\n\n左上角➕号新建一个Bottle，名字随便写,类型选择游戏,运行器选择 `wine10`\n\n![](../../images/c.png)\n\n点击运行可执行文件，选择[官网直链下载](https://music.163.com/#/download)下载下来的exe文件\n\n![](../../images/CloudMusicOnLinux/d.png)\n\n安装后可以在下面直接打开,也可以添加快捷方式到应用程序菜单中\n\n![](../../images/CloudMusicOnLinux/e.png)\n\n\n\n#### HiDPI\n点击设置\n\n![](../../images/CloudMusicOnLinux/f.png)\n\n高级显示设置\n\n![](../../images/CloudMusicOnLinux/g.png)\n\n倍数用0.96乘你需要的,这里我需要150%,150x96%=144\n\n![](../../images/CloudMusicOnLinux/h.png)\n\nref： [网易云音乐最新版 Wine方案 （网易云Beta）](https://renil.cc/archives/47/)\n\n> 完善于2025年7月29日\n","tags":["Linux","Tech"],"categories":["Linux"]},{"title":"其实是献给自己的Hexo教程 2","url":"/posts/5e452484.html","content":"\n# 使用git分支保存Hexo源码到Github\n\n引言：最开始想弄这个主要是因为我有多系统，多台设备，每次都要把整个文件夹进行压缩备份到U盘，效率低且不够优雅，偶然搜索到两篇帖子，助我解决了这一大难题，这里感谢[使用git分支保存hexo博客源码到github](https://zhuanlan.zhihu.com/p/71544809) 和 [hexo源码上传到GitHub](https://www.cnblogs.com/eidolonw/p/13066869.html) 这两篇帖子的编写者！\n\n那么，教程开始\n\n## 教程\n\n### 1. 如图：\n\n![如图](../../images/Hexo/b.png \"如图\")\n\n### 2. 然后将其设置成默认分支：\n\n![如图](../../images/Hexo/c.png \"如图\")\n\n然后你这时候如果直接按照文章来的话，不行，大概率会**报错**...(问就是试过)\n \n### 3. 初始化\n```\ngit init #先初始化\n```\n\n### 4. **然后将本地Hexo目录与远程仓库关联**\n```\ngit remote add origin https://github.com/k7tmiz/k7tmiz.github.io.git\n```\n\n### 5. 此时进入目录\n`Ctrl+H` 显示所有文件。删掉 `.deploy_git` 文件夹，如果已经clone过主题文件，那么需要把theme主题文件夹里的 `.git` 也删除。因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就无法正常使用了。**根目录中应该有个 `.gitignore` 文件**，如果没有，请自行创建并添加以下内容:\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n_multiconfig.yml\n```\n\n\n### 6. 将clone并修改以后的文件夹推送到远程库\n```\ngit add .\ngit commit –m \"Description\"\ngit push origin Hexo\n```\n此时已经成功将整个网站的源码全部推送到了远程库的默认分支Hexo中\n\n### 7. 删除public等文件（可选）\n因为source分支是从master分支新建的，初始代码实际就是master的拷贝，因而master中已有的public等deploy生成的文件也会一起带过来，这些都不算是博客源文件，如果你也觉着source分支还存着这些有些别扭，就可以先在本地把它删掉，然后执行：\n```\ngit add .\ngit commit -m 'DEL: public things which only for deploy'\ngit push origin source\n```\n执行完之后，你的仓库大概就是长这个样子：\n\n![如图](../../images/Hexo/d.png \"如图\")\n\n后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有.gitignore将其忽略了。\n\n### 8. 新环境\n假设我们换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过 `git clone` 将博客源码拉到本地，然后安装、初始化Hexo就能搞定：\n```\ngit clone https://github.com/k7tmiz/k7tmiz.github.io.git Blog\ncd Blog\nnpm install -g hexo-cli\nnpm install hexo-deployer-git -save\nnpm install #安装所有依赖模块\n```\n\n>插曲，其实不设置成默认的也可以，只不过拉取的时候要git clone -b `branch_name` `source`","tags":["Tech"],"categories":["Tech"]},{"title":"其实是献给自己的Hexo教程","url":"/posts/8b69008.html","content":"\n# Hexo和Github Pages\n\n## 为什么选择Github Pages？\n作为一个大学生，其实已经经过了很多尝试，我从初二开始接触Linux,接触服务器，反复搭过很多次自己的网站，但因为学业繁重，最后基本都不了了之...甚至最开始只会用服务器搭建，很多时候没有备份，忘记续费于是资料就全没了。而Github Pages的话，最大的优点就是完全免费！所以你有兴趣的话就继续看下去吧！\n\n## 科普\n1. Github Pages：\n>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。\n你可以在 GitHub 的 github.io 域或自己的自定义域上托管站点。\n\n可以总结为以下几点：\n- Github Pages 是 Github 提供的网页寄存服务，用于存放静态网页，也就是我们的博客。\n- 我们可以使用专业软件将文档转换成静态网页（如：Hexo），然后上传至 Github\n- 最后的结果就像现在这样，你们可以通过我的github.io子域名访问到我生成的静态网页，即本篇博客\n\n2. Hexo：\n- Hexo 是一款基于 Node.js 的快速、简洁且高效的静态博客框架。\n- Hexo 使用 Markdown（或其他渲染引擎）解析文章，安装十分方便，配置简单，自定义功能强大，在几秒内，即可利用靓丽的主题生成静态网页。\n- 使用起来的效果就是：我仍然可以使用 Markdown 写博客内容，然后使用部署在本地的Hexo框架进行解析，生成相应的静态网页，最后一键上传即可。\n\n# 教程开始：\n## Step1: 创建 github 账号和`username`.github.io 仓库\n\n## Step2: 在本地部署环境(Linux)\n\n- 安装: \n```\nsudo pacman -S git npm nodejs\n```\n\n- 部署Hexo: \n```\nnpm install -g hexo-cli\n```\n- 初始化 Hexo 框架: \n```\nhexo init Blog\n```\n- 进入 Blog 文件夹: \n```\ncd Blog\n```\n- 安装依赖: \n```\nnpm install\n```\n- 启动 Hexo 服务: \n```\nhexo s\n```\n\n## Step3: 配置 Next 主题\n\n- Github拉取Next主题: \n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n- 在根目录的 `_config.yml` 文件中修改 `theme: next`\n\n## Step4: 添加博客内容\n\n- 将写好的 Markdown 放到 `source\\_posts` 目录\n- 将相应的图片放到 `source\\images` 目录\n- 启动 Hexo 服务\n## Step5: Next主题美化\n\n### **选择Scheme**\n编辑主题配置文件 `themes\\next_config.yml` ，确定喜爱的Scheme，我选择了Gemini\n```\n# Schemes\nscheme: Gemini\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n\n### 侧边栏显示当前浏览进度\n打开 `themes/next/_config.yml` ，搜索关键字 `scrollpercent` ,把 false 改为 true\n>如果想把 top 按钮放在侧边栏，搜索关键字sidebar ,把 false 改为 true\n\n### 侧边栏加入网易云音乐播放器插件\n首先在网页搜索网易云音乐，选择音乐或者歌单，并生成外链：\n![外链](../../images/Hexo/f.png)\n\n然后得到外链html代码：\n![插件html](../../images/Hexo/g.png)\n\n将代码粘贴到一个合适的位置，建议放在侧边栏，在Blog/themes/next/layout/_macro/sidebar.swig文件下，选择位置复制进去，不同位置效果不同：\n![效果](../../images/Hexo/h.png)\n\n### 隐藏网页底部powered By Hexo / 强力驱动\n打开 `themes/next/layout/_partials/footer.swig` ,使用注释隐藏之间的代码即可，或者直接删除。位置如下：\n```\n<!--\n{%- if theme.footer.powered %}\n  <div class=\"powered-by\">\n    {%- set next_site = 'https://theme-next.org' %}\n    {%- if theme.scheme !== 'Gemini' %}\n      {%- set next_site = 'https://' + theme.scheme | lower + '.theme-next.org' %}\n    {%- endif %}\n    {{- __('footer.powered', next_url('https://hexo.io', 'Hexo', {class: 'theme-link'}) + ' & ' + next_url(next_site, 'NexT.' + theme.scheme, {class: 'theme-link'})) }}\n  </div>\n{%- endif %}\n-->\n```\n\n### 设定菜单内容\n\n编辑主题配置文件 `themes\\next_config.yml`\n```\nmenu:\n  #home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  #archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n>按照上面的方式设置的菜单之后，点击标签，或者关于我都会出现错误页面，那这是怎么回事呢？\n在默认情况，source 目录只有 _posts 一个文件夹的，并没有生成对应的 tags,about 等文件夹\n\n生成下菜单文件夹的可以了: ```hexo new page tags```\n\n### 搜索功能\n\n```\nnpm install hexo-generator-search --安装插件，用于生成博客索引数据\n```\n\n修改博客配置文件（根目录/_config.yml），添加以下代码\n```\nsearch:\n  path: search.json\n  field: post\n  format: html\n  limit: 1000\n```\n\n### 文章自动折叠功能\n\n```\nnpm install hexo-excerpt --save\n```\n\n修改博客配置文件（根目录/_config.yml），添加以下代码\n```\nexcerpt:\n  depth: 10\n  excerpt_excludes: []\n  more_excludes: []\n  hideWholePostExcerpts: true\n```\n\n[Hexo-Excerpt](https://github.com/chekun/hexo-excerpt)\n\n### 利用Hexo-abbrlink插件生成唯一文章链接\n\nHexo在生成博客文章链接时，默认是按照年、月、日、标题格式来生成的，可以在站点配置文件中指定new_post_name的值。默认是:year/:month/:day/:title这样的格式。如果你的标题是中文的话，你的URL链接就会包含中文。复制后的url路径就是把中文变成了一大堆字符串编码，如果你在其它地方用了你自己这篇文章的url链接，偶然你又修改了该文章的标题，那这个url链接岂不是失效了。\n为了给每一篇文章来上一个属于自己的链接，可以利用hexo-abbrlink插件，来解决这个问题。\n\n首先安装下hexo-abbrlink\n```\nnpm install hexo-abbrlink --save\n```\n\n修改博客配置文件（根目录/_config.yml），添加以下代码\n```\npermalink: post/:abbrlink.html\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\n```\n\n### 日志的自动分类插件\n\n```\nnpm install hexo-auto-category --save\n```\n\n修改博客配置文件（根目录/_config.yml），添加以下代码\n```\nauto_category:\n enable: true\n depth:\n```\n\n### 给Hexo博客添加RSS订阅\n\nref：[hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n\n```\nnpm install hexo-generator-feed --save\n```\n\n然后在 `hexo` 根目录下的 `_config.yml` 文件中添加配置\n```\n# RSS订阅\nfeed:\n  enable: true\n  type: atom\n  path: atom.xml\n  limit: 0\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n  icon: icon.png\n  autodiscovery: true\n  template:\n```\n\n在主题目录的 `_config.yml` 的menu目录添加\n\n```\nRSS: /atom.xml || fa fa-rss\n```\n\n### Hexo插入图片并解决图片的路径问题\n\nref: [Hexo插入图片并解决图片的路径问题](https://www.hwpo.top/posts/d87f7e0c/index.html)\n\n```\nnpm install hexo-renderer-marked --save\n```\n\n修改博客配置文件（根目录/_config.yml），修改添加以下代码\n```\npost_asset_folder: true\nrelative_link: false\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n- post_asset_folder: true\n> 执行hexo new post xxx时，会同时生成./source/_posts/xxx.md文件和./source/_posts/xxx目录，可以将该文章相关联的资源放置在该资源目录中。\n- relative_link: false\n> 不要将链接改为与根目录的相对地址。此为默认配置。\n- prependRoot: true\n> 将文章根路径添加到文章内的链接之前。此为默认配置。\n- postAsset: true\n> 在post_asset_folder设置为true的情况下，在根据prependRoot的设置在所有链接开头添加文章根路径之前，先将文章内资源的路径解析为相对于资源目录的路径。\n\n举例说明：\n执行hexo new post demo后，在demo文章的资源路径下存放了a.jpg和cover.jpg（用作封面），目录组织结构如下：\n```\n./source/_posts\n├── demo.md\n└── demo\n    ├── a.jpg\n    └── cover.jpg\n```\n\n在demo.md的适当位置引用这两张图片，指定图片相对路径时需要假设当前目录为./source/_posts/demo/，而不是demo.md文件本身的所在目录。\n\n图片语法:\n`![这是图片](/assets/img/philly-magic-garden.jpg \"Magic Gardens\")`\n\nGithub仓库: [hexo-renderer-marked](https://github.com/hexojs/hexo-renderer-marked)\n\n### Hexo插入音视频等等\n\n有图片，那怎么少得了音视频呢\n\n安装插件：\n```\n npm install hexo-tag-mmedia@1 --save\n```\n\n>别问为什么不用dplayer和apldayer,原因就是用不了，不兼容新版本\n\n修改博客配置文件（根目录/_config.yml），修改添加以下代码\n```\nmmedia:\n  audio:\n    default:\n  video:\n    default:\n  aplayer:\n    js: https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js\n    css: https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css\n    default:\n      contents:\n  meting:\n    js: https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\n    api:\n    default:\n  dplayer:\n    js: https://cdn.jsdelivr.net/npm/dplayer@1/dist/DPlayer.min.js\n    hls_js: https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js\n    dash_js: https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js\n    shaka_dash_js: https://cdn.jsdelivr.net/npm/shaka-player/dist/shaka-player.compiled.js\n    flv_js: https://cdn.jsdelivr.net/npm/flv.js/dist/flv.min.js\n    webtorrent_js: https://cdn.jsdelivr.net/npm/webtorrent/webtorrent.min.js\n    default:\n      contents:\n  bilibili:\n    default:\n      page: 1\n      danmaku: true\n      allowfullscreen: allowfullscreen\n      sandbox: allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\n      width: 100%\n      max_width: 850px\n      margin: auto\n  xigua:\n    default:\n      autoplay: false\n      startTime: 0\n      allowfullscreen: allowfullscreen\n      sandbox: allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\n      width: 100%\n      max_width: 850px\n      margin: auto\n```\n\n使用方法：\n\nAplayer：\n```\n{% mmedia \"aplayer\" \"name:songName\" \"url:a.mp3\" %}\n```\n\nDplayer：\n```\n{% mmedia \"dplayer\" \"url:a.mp4\" %}\n```\n\nref：[hexo-tag-mmedia](https://www.u2sb.com/OpenSw/hexo-tag-mmedia/)\n\n### 一键回顶部\n\n修改Next配置文件（themes/next/_config.yml），修改以下代码\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: false\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n\n### 阅读进度条\n\n修改Next配置文件（themes/next/_config.yml），修改以下代码\n```\nreading_progress:\n  enable: true\n  # Available values: top | bottom\n  position: top\n  color: \"#37c6c0\"\n  height: 3px\n```\n\n### 作者头像设置\n将我们的头像图片放置在 `themes/next/source/images` 目录下，然后修改 `themes/next/_config.yml`\n```\n# Sidebar Avatar\navatar:\n  # Replace the default image and set the url here.\n  url: /images/author.jpeg\n  # If true, the avatar will be dispalyed in circle.\n  rounded: false #头像是否设为圆形，否则为矩形\n  # If true, the avatar will be rotated with the cursor.\n  rotated: true #鼠标放在头像上时是否旋转\n```\n\n### 添加博客自定义图标\n博客网站的图标可以在[easyicon](https://www.easyicon.cc/)、[bitbug](https://www.bitbug.net/)、[iconfont](https://www.iconfont.cn/)等网站选择和制作，然后选择或者创建相应大小的图标文件，放置在 `themes/next/sources/images` 目录下，然后修改 `themes/next/_config.yml`\n```\nfavicon:\n  small: /images/favicon-16.png\n  medium: /images/favicon-32.png\n  apple_touch_icon: /images/favicon-128.png\n  safari_pinned_tab: /images/favicon-512.png\n  #android_manifest: /images/manifest.json\n  #ms_browserconfig: /images/browserconfig.xml\n```\n\n### 增加文章置顶功能\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：\n```\n---\ntitle: 我与Linux的情缘\ntags: Linux\ncategories:\n  - Linux\nabbrlink: d773eb13\ndate: 2025-05-11 22:24:04\ntop: true\n---\n```\n\n到目前为止，置顶功能已经可以实现了。\n\n不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的\n\n**设置置顶标志**\n打开： `themes/next/layout/_macro` 目录下的`post.swig`文件，定位到 `<div class=\"post-meta\">`标签下，插入如下代码：\n\n```\n\t\t\t\t\t{% if post.top %}\n\t\t\t\t\t\t<font color=7D26CD>置顶</font>\n\t\t\t\t\t\t<span class=\"post-meta-divider\">|</span>\n\t\t\t\t\t{% endif %}\n```\n![效果如图](../../images/Hexo/e.png \"效果如图\")\nref: [Hexo博客优化之彻底解决博文置顶问题](https://zhuanlan.zhihu.com/p/33617563)\nref: [Hexo博客置顶功能优化](https://www.itfanr.cc/2019/09/05/hexo-top-optimize/)\n\n### 定制Next主题的Sidebar_state\n因为只有true和false 而我想定制在Hexo的NexT主题中仅显示侧边栏的archive部分并隐藏tags\n\n修改Next配置文件 `theme/next/layout/_partials/sidebar/site-overview.swig` ，注释你想注释掉的，比如我注释掉了 `categories` 和 `tags` \n\n![效果如图](../../images/Hexo/a.png \"效果如图\")\n\n## Step6: 将生成的静态页面部署到 Github 上\n- 具体操作：修改站点配置文件_config.yml的最后部分\n```\ndeploy:\n  type: git\n  repo: https://github.com/k7tmiz/k7tmiz.github.io.git\n  branch: master\n```\n**要先安装deploy-git，才能用命令部署到GitHub**\n```\nnpm install hexo-deployer-git --save\n```\n\n然后\n```\nhexo clean #清除之前生成的东西\nhexo generate  #生成静态文章，缩写hexo g\nhexo deploy  #部署文章，缩写hexo d\n```\n\n过一会儿就可以在 `yourname.github.io` 这个网站看到你的博客了\n\n暂时也想不太起来还改了哪些内容，等想起来或者有扩充我再接着完善文档好吧\n\n> 还有使用Git分支保存Hexo博客源码到Github有空再更... 2025.5.19日凌晨0:45分先立下Flag(doge)\n\n## 其他参考的一些帖子\n\nref: [2024年，如何使用 github pages + Hexo + Next 搭建个人博客](https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/)\nref: [NexT主题美化](https://losophy.github.io/post/71afd747.html)\nref: [Hexo博客优化之Next主题美化](https://huangpiao.tech/2019/01/24/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/)\n","tags":["Tech"],"categories":["Tech"]},{"title":"我与计算机的故事","url":"/posts/d773eb13.html","content":"\n我是一个行走在文理边界上的旅人，心中燃烧着对计算机世界的恒久热爱。\n\n我的故事，始于北京的家中。\n\n父母工作繁忙，陪伴我的，是家中那两台早早备下的电脑。或许这算得上一种时代的馈赠，让我在懵懂的年纪便与数字世界结缘。那时的热爱，纯粹而天真——利用电脑查找资料、沉浸游戏，服务器、Linux、编程这些深邃的概念，还远在认知的地平线之外。\n\n直至初中岁月，如同推开一扇新世界的大门，我通过视频初识了Linux。好奇心驱使下，我迈出了尝试的第一步。安装的第一个发行版记忆犹新，正是声名远播的 `Deepin`（大约是2018年，`Deepin 15`的时代）。那时的DDE桌面尚未如今日般繁复，简洁中自有其魅力。至今，我依然关注着它的每一次重大更新，比如当下最新的`Deepin 25`，其蜕变令人感慨万千。然而，Deepin并未成为终点。很快，`Arch Linux` 那种“简单、现代、实用”的理念深深吸引了我。出于谨慎，我首先选择了基于`Arch Linux`的开箱即用版——`Manjaro` + KDE。这不仅是一次系统尝试，也意外地开启了我与KDE桌面的长久缘分...自那次与Manjaro的邂逅起，KDE Plasma 便如一位默契的老友，伴我穿梭于数字世界的每一次探索，直至今日。 至于最终何时、因何（是Arch那极具设计感的图标，还是当时`Manjaro`偶尔的“滚挂”风波？记忆已有些模糊）彻底投入`Arch Linux`的怀抱...\n\n总之从那时起，我便以`Arch Linux`为主力系统，同时广泛涉猎其他发行版（如`Kali`, `elementaryOS`, `PopOS`, `FydeOS`等，`Mint`则只在虚拟机中短暂停留），已难以精确追溯。正是\n在这个阶段，我的探索触角延伸到了服务器领域和编程世界。初中学习了`C++`，并在初三毕业的暑假拥抱了`Python`。服务器系统方面，`CentOS 7`曾是我的挚爱，但随着其发展路线的风云变幻，稳定可靠的Debian成为了我的最终选择，从9到12版本，皆曾亲历。\n\n步入高中，疫情时代网课需求骤增，而Linux对腾讯会议等工具的支持尚显稚嫩。加之学业日益繁重，能够自由“折腾”的时间被大大压缩。然而，热爱并未熄灭。那台老旧的机器上，`Arch Linux` 与 `Windows` 的双系统依然共存，我仍会抓住间隙，执行那熟悉的`sudo pacman -Syu`指令。令人欣慰的是，直至高三毕业，它竟也未曾“滚挂”，堪称一段稳定的陪伴。\n\n大学伊始，新电脑在手。作为文科生，且彼时电脑的主要任务是游戏，`Windows`自然成为主角，机器也一度沉寂。然而转机总在不经意间降临：一次Windows关机后并未真正沉睡，竟在背包中“空转”月余。待到再次启用，迎接我的却是花屏的桌面。进入PE环境排查，确认是系统问题，光是官方驱动包的安装调试就耗费了一整天。这次不甚愉快的经历，叠加了Windows强制更新、“假休眠”导致风扇狂转、以及种种被当作“宝宝”般过度保护的行为，终于唤醒了我对**Linux**自由精神的深切怀念。\n\n行动迅捷。购入一块新硬盘，十分钟内`Arch Linux`便已部署完毕——那熟悉的气息瞬间回归。但世界也在前进：KDE经历重大版本迭代，Steam正大力重塑Linux游戏生态，新技术层出不穷。我过往积累的经验，竟有许多已不再适用。这非但没有令我沮丧，反而重新点燃了强烈的探索欲。\n\n再次深入，我发现一切已然不同：原生Linux版微信不再是奢望，QQ对Linux用户也一视同仁；Valve凭借搭载Arch系`SteamOS`的SteamDeck掌机，以及其基于Wine精心打造的Proton兼容层，极大地繁荣了Linux的游戏生态；更因UOS在政企领域的广泛部署，国内Linux用户普遍受益。如今在Linux下畅玩游戏，早已不是一件值得自嘲的“壮举”。\n\n这激起了我新一轮广泛体验的热情：`openSUSE Tumbleweed`的优雅滚动、`Ubuntu`的普及生态、`Fedora`的前沿特性、`openSUSE Leap`的稳健、`Debian 12`的纯粹、`NixOS`的革命性理念……有趣的是，尽管我频繁使用基于`Debian`的发行版及其衍生产品，也管理过众多搭载`Debian/Ubuntu`的服务器，桌面端却始终未曾真正深入体验过原生`Debian`。\n\n**如今，我的数字世界由两台电脑承载**：\n\n- 轻薄本： `Arch Linux`（主力）, `FydeOS`, `Hackintosh`\n\n- 游戏本： `Arch Linux`（主力）, `openSUSE Tumbleweed`, `Fedora 42`, `Debian Testing`, 以及暂时保留的 `Windows 11`（最后的妥协与备选）\n\n>本文完善于2025.6.25日\n\n\n\n> 2025.7.20日,我的openSUSE Tumbleweed在一次zypper dup中因为驱动问题惨烈牺牲,借此机会我也把系统数量给精简成为了三个,Arch Linux,Fedora42和Windows11\n\n","tags":["Article"],"categories":["Article"]},{"title":"西班牙语简单过去时","url":"/posts/b8718f34.html","content":"\n# 西班牙语简单过去时 (Pretérito Indefinido / Pretérito Perfecto Simple)\n\n简单过去时用于描述在过去特定时间点完成的、一次性的动作或事件。\n\n## 一、规则动词变位\n\n### 1. -AR 结尾动词\n(例如: `hablar` - 说话)\n词根 + 以下词尾：\n- Yo: **-é**\n- Tú: **-aste**\n- Él/Ella/Usted: **-ó**\n- Nosotros/as: **-amos** (*与现在时nosotros形式相同*)\n- Vosotros/as: **-asteis**\n- Ellos/Ellas/Ustedes: **-aron**\n\n**表格：`cantar` (唱歌)**\n| 人称             | 变位      |\n|----------------|-----------|\n| Yo             | cant**é**  |\n| Tú             | cant**aste** |\n| Él/Ella/Usted  | cant**ó**  |\n| Nosotros/as    | cant**amos** |\n| Vosotros/as    | cant**asteis**|\n| Ellos/Ellas/Ustedes | cant**aron** |\n\n### 2. -ER 结尾动词\n(例如: `comer` - 吃)\n词根 + 以下词尾：\n- Yo: **-í**\n- Tú: **-iste**\n- Él/Ella/Usted: **-ió**\n- Nosotros/as: **-imos**\n- Vosotros/as: **-isteis**\n- Ellos/Ellas/Ustedes: **-ieron**\n\n**表格：`beber` (喝)**\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | beb**í**  |\n| Tú             | beb**iste** |\n| Él/Ella/Usted  | beb**ió**  |\n| Nosotros/as    | beb**imos** |\n| Vosotros/as    | beb**isteis**|\n| Ellos/Ellas/Ustedes | beb**ieron** |\n\n### 3. -IR 结尾动词\n(例如: `vivir` - 生活)\n词根 + 以下词尾 (与-ER动词词尾相同)：\n- Yo: **-í**\n- Tú: **-iste**\n- Él/Ella/Usted: **-ió**\n- Nosotros/as: **-imos** (*与现在时nosotros形式相同*)\n- Vosotros/as: **-isteis**\n- Ellos/Ellas/Ustedes: **-ieron**\n\n**表格：`escribir` (写)**\n| 人称             | 变位       |\n|----------------|------------|\n| Yo             | escrib**í**  |\n| Tú             | escrib**iste** |\n| Él/Ella/Usted  | escrib**ió**  |\n| Nosotros/as    | escrib**imos** |\n| Vosotros/as    | escrib**isteis**|\n| Ellos/Ellas/Ustedes | escrib**ieron** |\n\n## 二、注意事项\n\n1.  **重音**：注意 `yo` 和 `él/ella/usted` 形式的重音符号，它们是区分人称和时态的关键。\n2.  **Nosotros 形式**：\n    *   对于 `-ar` 和 `-ir` 结尾的动词，`nosotros` 形式在简单过去时和现在时中是相同的 (e.g., `hablamos`, `vivimos`)。需要根据上下文判断时态。\n    *   对于 `-er` 结尾的动词，`nosotros` 形式在简单过去时 (`-imos`) 和现在时 (`-emos`) 是不同的 (e.g., `comimos` vs `comemos`)。\n3.  **用途**：\n    *   表示在过去特定时间点开始并结束的动作。\n    *   叙述一系列连续发生的过去动作。\n    *   表示一个中断另一个正在进行的过去动作的动作 (被打断的动作通常用过去未完成时)。\n\n## 三、不规则动词\n\n不规则动词通常有不规则的词根，但许多共享一套特殊的词尾。\n\n**常用不规则词尾组 (用于强变化词根):**\n- Yo: **-e**\n- Tú: **-iste**\n- Él/Ella/Usted: **-o**\n- Nosotros/as: **-imos**\n- Vosotros/as: **-isteis**\n- Ellos/Ellas/Ustedes: **-ieron** (若词根以 `j` 结尾, 则为 **-eron**)\n\n### 1. \"超级\"不规则\n\n*   **Ser (是) / Ir (去)** (变位完全相同)\n    | 人称    | Ser / Ir |\n    |---------|----------|\n    | Yo      | fui      |\n    | Tú      | fuiste   |\n    | Él/Ella | fue      |\n    | Nosotros| fuimos   |\n    | Vosotros| fuisteis |\n    | Ellos   | fueron   |\n\n*   **Dar (给)** (词尾类似-ER/-IR，但无重音)\n    | 人称    | Dar    |\n    |---------|--------|\n    | Yo      | di     |\n    | Tú      | diste  |\n    | Él/Ella | dio    |\n    | Nosotros| dimos  |\n    | Vosotros| disteis|\n    | Ellos   | dieron |\n\n*   **Ver (看)** (词尾类似-ER/-IR，但无重音)\n    | 人称    | Ver    |\n    |---------|--------|\n    | Yo      | vi     |\n    | Tú      | viste  |\n    | Él/Ella | vio    |\n    | Nosotros| vimos  |\n    | Vosotros| visteis|\n    | Ellos   | vieron |\n\n### 2. 词根变化 (使用上述\"常用不规则词尾组\")\n\n#### a) U-组 (词根含 -u-)\n| 原形    | 词根   | Yo    | Tú     | Él/Ella | Nosotros | Vosotros | Ellos   |\n|---------|--------|-------|--------|---------|----------|----------|---------|\n| Tener   | `tuv-` | tuve  | tuviste| tuvo    | tuvimos  | tuvisteis| tuvieron|\n| Estar   | `estuv-`| estuve| estuviste|estuvo  | estuvimos | estuvisteis|estuvieron|\n| Andar   | `anduv-`| anduve| anduviste|anduvo  | anduvimos| anduvisteis|anduvieron|\n| Poner   | `pus-` | puse  | pusiste| puso    | pusimos  | pusisteis| pusieron|\n| Poder   | `pud-` | pude  | pudiste| pudo    | pudimos  | pudisteis| pudieron|\n| Saber   | `sup-` | supe  | supiste| supo    | supimos  | supisteis| supieron|\n\n#### b) I-组 (词根含 -i-)\n| 原形    | 词根   | Yo    | Tú     | Él/Ella | Nosotros | Vosotros | Ellos   |\n|---------|--------|-------|--------|---------|----------|----------|---------|\n| Venir   | `vin-` | vine  | viniste| vino    | vinimos  | vinisteis| vinieron|\n| Querer  | `quis-`| quise | quisiste|quiso   | quisimos | quisisteis|quisieron|\n| Hacer   | `hic-` | hice  | hiciste| **hizo**| hicimos  | hicisteis| hicieron|\n    *注意: `hacer` 的 él/ella/usted 形式是 `hizo` (c -> z 保持发音)*\n\n#### c) J-组 (词根含 -j-, ellos/as/Uds. 词尾为 `-eron`)\n| 原形         | 词根    | Yo    | Tú     | Él/Ella | Nosotros | Vosotros | Ellos    |\n|--------------|---------|-------|--------|---------|----------|----------|----------|\n| Decir        | `dij-`  | dije  | dijiste| dijo    | dijimos  | dijisteis| dij**eron**|\n| Traer        | `traj-` | traje | trajiste|trajo   | trajimos | trajisteis|traj**eron**|\n| Conducir     | `conduj-`|conduje|condujiste|condujo|condujimos|condujisteis|conduj**eron**|\n| *(-ducir结尾)*|         |       |        |         |          |          |          |\n\n### 3. 第三单复数词根元音变化 (-IR 动词)\n仅在 `él/ella/usted` 和 `ellos/ellas/ustedes` 形式发生词根元音变化 (e -> i; o -> u)。其他形式规则。\n\n*   **e -> i**: `pedir` (请求), `sentir` (感觉), `seguir` (跟随), `preferir` (偏爱), `repetir` (重复)\n    *   **Pedir**: pedí, pediste, p**i**dió, pedimos, pedisteis, p**i**dieron\n    *   **Sentir**: sentí, sentiste, s**i**ntió, sentimos, sentisteis, s**i**ntieron\n\n*   **o -> u**: `dormir` (睡觉), `morir` (死)\n    *   **Dormir**: dormí, dormiste, d**u**rmió, dormimos, dormisteis, d**u**rmieron\n    *   **Morir**: morí, moriste, m**u**rió, morimos, moristeis, m**u**rieron\n\n### 4. 正字法变化 (仅 Yo 形式，保持发音)\n其他形式规则。\n*   `-car` -> `-qué`: `buscar` (寻找) -> yo bus**qué**\n*   `-gar` -> `-gué`: `llegar` (到达) -> yo lle**gué**\n*   `-zar` -> `-cé`: `empezar` (开始) -> yo empe**cé**\n\n### 5. i -> y 变化 (第三单复数，词根以元音结尾)\n当词根以元音结尾，且后面是 `-ió` 或 `-ieron` 时，`i` 变为 `y`。\n*   `leer` (阅读): leí, leíste, le**y**ó, leímos, leísteis, le**y**eron\n*   `oír` (听见): oí, oíste, o**y**ó, oímos, oísteis, o**y**eron\n*   `creer` (相信): creí, creíste, cre**y**ó, creímos, creísteis, cre**y**eron\n*   `-uir` 结尾动词 (e.g., `construir` - 建造): construí, construiste, constru**y**ó, construimos, construisteis, constru**y**eron\n\n---\n**记忆提示**：\n*   将不规则动词分组记忆。\n*   注意强变化词根的共同词尾。\n*   多加练习，通过语境熟悉其用法。\n","tags":["Study","Spanish"],"categories":["Study"]},{"title":"西班牙语陈述式过去未完成时","url":"/posts/567971b1.html","content":"\n\n# 西班牙语陈述式过去未完成时 (Pretérito Imperfecto de Indicativo)\n\n过去未完成时主要用于描述过去持续的、习惯性的动作，或对过去的背景、状态、人物进行描述，相当于英语中的 \"used to\", \"would (for habitual past actions)\", 或 \"was/were + -ing\" (描述背景或持续动作时)。\n\n## 一、规则动词变位\n\n过去未完成时的规则动词变位非常简单，只有两套词尾。\n\n### 1. -AR 结尾动词\n词根 + 以下词尾：\n- Yo: **-aba**\n- Tú: **-abas**\n- Él/Ella/Usted: **-aba**\n- Nosotros/as: **-ábamos** (注意重音)\n- Vosotros/as: **-abais**\n- Ellos/Ellas/Ustedes: **-aban**\n\n**例如：`hablar` (说话)**\n\n| 人称             | 变位      |\n|----------------|-----------|\n| Yo             | habl**aba**  |\n| Tú             | habl**abas** |\n| Él/Ella/Usted  | habl**aba**  |\n| Nosotros/as    | habl**ábamos**|\n| Vosotros/as    | habl**abais**|\n| Ellos/Ellas/Ustedes | habl**aban** |\n\n### 2. -ER 和 -IR 结尾动词\n这两类动词在过去未完成时中使用相同的词尾。\n词根 + 以下词尾：\n- Yo: **-ía**\n- Tú: **-ías**\n- Él/Ella/Usted: **-ía**\n- Nosotros/as: **-íamos** (注意重音)\n- Vosotros/as: **-íais**\n- Ellos/Ellas/Ustedes: **-ían**\n\n**例如：`comer` (吃, -ER)**\n\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | com**ía**  |\n| Tú             | com**ías** |\n| Él/Ella/Usted  | com**ía**  |\n| Nosotros/as    | com**íamos**|\n| Vosotros/as    | com**íais**|\n| Ellos/Ellas/Ustedes | com**ían** |\n\n**例如：`vivir` (生活, -IR)**\n\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | viv**ía**  |\n| Tú             | viv**ías** |\n| Él/Ella/Usted  | viv**ía**  |\n| Nosotros/as    | viv**íamos**|\n| Vosotros/as    | viv**íais**|\n| Ellos/Ellas/Ustedes | viv**ían** |\n\n## 二、注意事项\n\n1.  **重音符号**：\n    *   -AR 动词的 `nosotros` 形式 (`-ábamos`) 的 `a` 上有重音。\n    *   -ER 和 -IR 动词的所有形式的 `i` 上都有重音 (`-ía`, `-ías`, `-ía`, `-íamos`, `-íais`, `-ían`)。\n2.  **用途**：\n    *   描述过去习惯性的动作 (e.g., `Cuando era niño, jugaba en el parque.` - 当我是个孩子时，我常在公园玩。)\n    *   描述过去的背景、情景、状态 (e.g., `Hacía sol y los pájaros cantaban.` - 当时阳光明媚，鸟儿在歌唱。)\n    *   描述人的年龄、时间、天气等 (e.g., `Tenía veinte años.` - 他/她当时二十岁。 `Eran las tres.` - 当时是三点。)\n    *   描述两个或多个同时发生的持续性过去动作 (e.g., `Mientras yo cocinaba, él leía.` - 当我做饭的时候，他在读书。)\n    *   用于礼貌地提出请求 (较少见，但可能出现，如 `Quería pedirle un favor.` - 我想请您帮个忙。)\n\n## 三、不规则动词\n\n在过去未完成时中，只有 **三个** 真正的不规则动词。这是这个时态相对简单的一个原因。\n\n### 1. `Ser` (是)\n\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | **era**  |\n| Tú             | **eras** |\n| Él/Ella/Usted  | **era**  |\n| Nosotros/as    | **éramos**|\n| Vosotros/as    | **erais**|\n| Ellos/Ellas/Ustedes | **eran** |\n\n### 2. `Ir` (去)\n\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | **iba**  |\n| Tú             | **ibas** |\n| Él/Ella/Usted  | **iba**  |\n| Nosotros/as    | **íbamos**|\n| Vosotros/as    | **ibais**|\n| Ellos/Ellas/Ustedes | **iban** |\n\n### 3. `Ver` (看见)\n(严格来说，`ver` 保留了词根的 `e`，然后加上了规则的 `-ía` 结尾，但通常被列为不规则)\n\n| 人称             | 变位     |\n|----------------|----------|\n| Yo             | **veía**  |\n| Tú             | **veías** |\n| Él/Ella/Usted  | **veía**  |\n| Nosotros/as    | **veíamos**|\n| Vosotros/as    | **veíais**|\n| Ellos/Ellas/Ustedes | **veían** |\n\n---\n**总结**：过去未完成时相对规则，主要记住两套词尾和三个不规则动词即可。重点在于理解其使用场景，以便与简单过去时区分开来。","tags":["Study","Spanish"],"categories":["Study"]},{"title":"云南旅游攻略4天2025.5.1","url":"/posts/4a1e9301.html","content":"# 云南旅游攻略\n\n\n# 昆明部分\n## **昆明部分是自己做的 大理大部分是购买的，秉承着Opensource的原则全部分享出来**\n> 其实还有好多好多照片都发到朋友圈去了 这些图片都是随便节选的...当然也是从朋友圈下载下来的 因为压缩，体积图片比较小嘻嘻\n\n#### 昆明双塔\n![昆明双塔](../../images/Yunnan/a.png \"昆明双塔\")\n\n- 滇池\n- 翠湖\n- 昆明老街\n- 西山索道(100)\n- 斗南花市\n- 陆军讲武堂\n\n### Day1 5月2日\n\n昆明站－昆明老街(东方书店－纸片楼－对月楼酒店)－(非正常咖啡馆 选去 打卡点)－黄公东街－翠湖公园－陆军讲武堂－西山索道－海洪湿地公园(滇池)－捞鱼河湿地公园(滇池)－斗南花市－南强集市\n\n> 视情况加入云南师大(主要是不好进去 管的严)\n\n> 最后还是没进去 from 25.5.10\n#### 忘了在哪拍的了...\n![臭美](../../images/Yunnan/b.png \"臭美\")\n\n#### 后几张都是昆明的滇池\n\n![滇池](../../images/Yunnan/c.png \"滇池\")\n\n![滇池](../../images/Yunnan/d.png \"滇池\")\n\n![滇池](../../images/Yunnan/e.png \"滇池\")\n\n![滇池](../../images/Yunnan/f.png \"滇池\")\n\n![滇池](../../images/Yunnan/g.png \"滇池\")\n\n![滇池](../../images/Yunnan/h.png \"滇池\")\n\n### Day2 5月3日\n\n有可能去海埂大坝看一眼日出\n\n十点高铁－大理\n\n# 大理\n\n- 洱海\n- 苍山(30)\n- S弯\n- 理想邦\n- 大理古城\n- 喜洲古镇\n- 沙溪古镇\n- 双廊古镇\n- 南诏风情岛\n- 崇圣寺三塔\n\n\n### Day2 5月3号大理行－下午\n\n大理站－磻溪村（S湾）-喜洲古镇（扎染+稻田）-大理古城\n> 下午打车前往磻溪村，租个自行车游览网红S湾生态廊道（游览时间2.5小时）（定位马久邑或磻溪村）\n洱海生态廊道全程差不多有50公里，精华地段就是马久邑附近和磻溪村附近，很多比较火的视频和图片都是这两段。\n线路大概为：马久邑-富美邑-下波淜-磻溪村-古生村，沿途有很多咖啡厅，玩累了可以进去坐坐，享受一下洱海边的风景。\n美食推荐：磻溪村附近（信达小吃，望海人家），马久邑附近(二两小吃店白族庭院私房菜，原生态白族农家菜），古生村（村里大青树附近有很多本地特色小吃）\n之后骑行抵达喜洲古镇，游览线路大致为：\n第一站：大理路边野餐咖啡画廊\n第二站：我在洱海有块田！ \n超级大的拍照基地，麦田很大，人也没有喜洲古镇里的多！有很多出片的机位，有火车，有秋千都很好看！\n第三站：白族扎染  推荐“喜蓝扎染”，做衣服。 \n扎染的步骤是先选定你做的款式，再和老板商量确认设计想法和实现步骤。店员会先辅助你完成手工部分后，进行1泡水/去碘伏2染色3 冲洗4 氧化5 皂洗6 清洗7 晒干，整个过程根据你选择的产品难易程度决定，体验大概在30分钟到一小时。就可以获得一件亲自设计扎染的艺术品啦\n喜洲还有非遗--瓦猫，各种类型的寓意都有，可以挑一个\n喜洲美食推荐:喜洲粑粑(一定要尝尝，当地特色)，四方街食店，口未江湖，喜洲老冰棍，喜酒坊小吃店\n吃完后夜游大理古城\n游览路线指南:床单艺术厂-五华楼（出片，缺点人多）-红龙井-关帝庙-文殊庙-天主教堂-玉洱园 -洋人街-电影博物馆-基督教堂\n\n**住宿**：大理古城\n\n#### 洱海\n![洱海](../../images/Yunnan/i.png \"洱海\")\n\n### Day3 5月4号\n\n龙龛码头-云想山（路极公园）-理想邦--文笔村日落\n> 早上第一站龙龛码头（游览时间2小时）， 大理最美码头之一，还有水中红杉树拍照很美。\n如果想体验洱海日出，就需要早一点，日出时间：早上7:30-8:00左右，可以稍微提前一点去占位置，享受等待日出的过程。\n位置导航：直接导航阳光便利店，距离海边大概只有200米\n之后电动车前往云想山-路极公园---亚洲第二国内唯一的路极（游览时间2.5小时）\n无想，无限的放空，任凭暮霭一点一点席卷天边，大理城的万家灯火星星点点，陆续绽放。沉溺在这无边的夜色之中。\n悬崖礼堂  白色的三角礼堂在蓝天与洱海的背景下特别唯美，还能看到远处的风车山\n咖啡店  一楼有个有着大大落地窗，很好拍，二楼是2188落日餐厅，价格有点贵，味道也一般般，三楼是天台，有一个镜面地板，白天可以拍自己的倒影，晚上看夜景一览无余\n山顶草坪 在咖啡馆旁边的草坡上，草坪不大，结合天空的云朵可以拍出很好玩的照片\n路极  是来自新西兰的无动力车，自己可以控制速度沿着山道开\n路极门票：大人188元3次  分叉口选右边是缓长的道，左边道更刺激好玩\n开到山脚可以坐缆车或者电瓶车上山顶\n下午前往圣托里尼·理想邦（游览时间1小时）\n推荐打卡：理想的花园！它藏在圣托里尼岛里，浪漫氛围拉满\n拍照点：小木屋、天空之镜、秋千、仙人掌、花门、大片的绣球花和小雏菊\n门票：135元/2人，单人票是68元/人\n美食推荐：烟云融合菜餐厅·川滇菜、天边的云Sky Cloud 海景餐厅\n最后前往文笔村，抵达前往海之礼堂，感受那里的壮丽海景。晚上，在海之礼堂边的悬崖餐厅品尝美食，欣赏美丽的日落。\n打卡彩虹公路，这里有种日本镰仓的感觉。无论是漫步还是骑行，都能让你放松心情。午餐时间，推荐到推荐餐厅：青寂日落海景餐厅  六阅海东方悬崖海景餐厅\n备选体验景点：罗荃半岛旁的理记咖啡（游览时间1小时）\n刘亦菲同款【理记先生】，是一辆超长的绿皮车，摊主推荐了“老板的一生”和“苍山梅烦恼”\n老板的一生：是一款生椰dirty，有苦有甜，感觉比之前用冰博客做的更好喝些。\n苍山梅烦恼：梅子味的冰美式，带点酸，果酸和咖啡的酸融合在一起，不会太酸也尝不到偏甜的糖浆味\n\n#### 洱海\n![洱海](../../images/Yunnan/j.png \"洱海\")\n![洱海](../../images/Yunnan/k.png \"洱海\")\n### Day4 5月5号 回昆明\n\n苍山索道（感通）-大理站\n>打车前往感通索道，苍山景点最集中的一条索道，全长2630米，全程25分钟，乘坐该缆车，可仰望苍山雪峰俯瞰百里洱海大理古城。沿途有珍珑棋局清碧溪苍山大峡谷玉带云游路，除索道外，还有千年古刹感通寺、“最美尼姑庵”寂照庵。\n感通索道详细攻略\n门票价格：全程窗口115，网络110，\n游玩线路：感通全程索道往返，约2.5小时\n1检票后乘索道至上站\n2到上站后游玩珍珑棋局、玉带路、苍山大峡谷、清碧溪\n3从感通索道下山\n4下山后游玩感通寺、寂照庵（可在庵内吃斋饭）\n\n# 大理伴手礼\n> 大理伴手礼推荐：白族扎染  瓦猫  白族甲马  剑川木雕  白族羊毛毡 鹤庆银器 下关沱茶 雕梅酒 洱宝话梅 乳扇 鲜花饼  鹤庆米糕  \n大理古城北门菜市场平等路上山货特产批发：普洱茶、果酒、野生菌、蜂蜜  小粒咖啡都不错\n大理古城土特产最多，都可以适当讲价。先尝后买。\n下关火车站旁边的有点贵。\n\n","tags":["Travel"],"categories":["Travel"]},{"title":"ArchLinux安装后指南","url":"/posts/f48c939a.html","content":"\n## root登录\n\n#### 联网,基于之前装的NetworkManager\n\n ```\n systemctl start NetworkManager #这里必须大写\n ```\n\n#### 开机自启动\n ```\n systemctl enable NetworkManager\n ```\n\n ```\n nmtui\n ```\n\n#### 触摸板驱动\n ```\n pacman -S xf86-input-synaptics\n ```\n\n#### X11\n ```\n pacman -S xorg\n ```\n\n#### Wayland\n ```\n pacman -S wayland xorg-xwayland\n ```\n\n> NVIDIA 多装一个 `xorg-xrandr`\n\n#### 开源中文字体安装\n ```\n pacman -S ttf-dejavu wqy-microhei wqy-zenhei\n ```\n\n#### 安装sudo\n ```\n pacman -S sudo\n ```\n\n\n\n## 添加用户并且提权\n\n#### 添加用户\n ```\n useradd -m -G wheel Bruno\n ```\n\n#### 密码\n ```\n passwd Bruno\n ```\n\n ```visudo``` 或者 ```nano /etc/sudoers```\n\n> 找到#%wheel ALL=(ALL)ALL 按X去掉# :wq 保存退出\n\n#### 重启\n ```\n reboot\n ```\n\n**重启进来用user登录**\n\n#### intel核显驱动\n\n**已经过时，不要装这个**\n>xf86-video-intel 是 Intel 的老驱动，已多年不维护，主要为 老款 Intel HD Graphics（Sandy Bridge 及以前） 设计\n\n ```\n sudo pacman -S xf86-video-intel\n ```\n\n开源驱动\n```\nsudo pacman -S mesa libva-intel-driver vulkan-intel\n```\n\n> 使用wayland的话推荐装\n\n```\nsudo pacman -S intel-media-driver\n```\n\n\n\n## 安装桌面环境\n\n> 本人是KDE的忠实教徒，如需其他桌面，请自行搜索\n\n### Plasma\n ```\n sudo pacman -S plasma kde-applications\n ```\n\n> 最小Plasma桌面 plasma-meta\n\n#### 锁屏\n ```\n sudo pacman -S sddm\n ```\n\n向 /etc/sddm.conf 中追加下面的内容。其中，QT_FONT_DPI 的值为你的 DPI 缩放数值 (计算方式是 96 乘以你的缩放比例，比如 150% 缩放则为 `144`)。QT_SCREEN_SCALE_FACTORS 的值为你需要的 DPI 缩放比例（比如，若为 150% 就直接填 `1.5`）,同时 sddm 登录界面不会自动将数字小键盘打开, sddm 的鼠标指针也可以更改一下\n```\n[General]\nGreeterEnvironment=QT_SCREEN_SCALE_FACTORS=1.5,QT_FONT_DPI=144\n\n# 打开数字小键盘\nNumlock=on\n\n# 修改鼠标指针，加入下面的设置\n[Theme]\nCursorTheme=breeze_cursors\n```\n> 修改完 HiDPI 设置之后可能需要重新启动系统。\n\n#### 开机自启动设置\n ```\n systemctl enable sddm\n ```\n\n#### **笔记本电源管理**\n ```\n sudo pacman -S power-profiles-daemon\n ``` \n (需要启用 `power-profiles-daemon` 服务)\n\n## 一些驱动\n\n#### 音频\n ```\n sudo pacman -S alsa-utils pipewire pipewire-alsa pipewire-pulse\n ```\n\n> 有可能装完还是用不了，我这里为了方便，直接一站式，有可能需要装`sof-firmware`--开源音频驱动\n\n#### 中文输入法\n ```\n sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt\n ```\n\n##### Wikipedia中文词库\n ```\n sudo pacman -S fcitx5-pinyin-zhwiki\n ```\n\n##### 搜狗拼音输入法的词库\n ```\n yay -S fcitx5-pinyin-sougou\n ```\n\n编辑 `~/.xprofile` 和 `/etc/environment`文件\n\n````\n\nexport GTK_IM_MODULE=fcitx\n\nexport QT_IM_MODULE=fcitx\n\nexport XMODIFIERS=@im=fcitx\n\n````\n\n##### fcitx5类似微软拼音的皮肤\n```\nsudo pacman -S fcitx5-material-color\n```\n\n#### zsh\n通过pacman安装zsh，然后将[此文件](../../files/zshrc)的内容覆盖到~/.zshrc中，完成配置。\n> - 需要事先安装git命令\n>\t - 使用`chsh -s /bin/zsh`来更改当前用户的默认终端\n\nref:[Archlinux 安装笔记](https://www.bwsl.wang/linux/34.html)\n\n#### rEFInd -- 多系统引导工具\n安装 `refind`包\n```\nsudo pacman -S refind\n```\n\n执行安装命令:\n\n```\nrefind-install\n```\n然后进入 `boot/EFI/refind` 将[此文件](../../files/refind)中的内容覆盖 `refind.conf`\n>需要安装darkmini的refind主题才能正常使用，如果不想安装主题或者不想用darkmini，就把最后一行 `include themes/darkmini/theme-mini.conf` 注释掉或者修改成你想使用的主题\n\nref: [rEFInd](https://wiki.archlinuxcn.org/wiki/REFInd)\n\n## ArchLinuxCN镜像源以及AUR\n\n**编辑/etc/pacman.conf**\n```\n[archlinuxcn]\nServer = https://mirrors.cernet.edu.cn/archlinuxcn/$arch\n```\n\n**之后通过以下命令安装 archlinuxcn-keyring 包导入 GPG key**\n```\nsudo pacman -Sy archlinuxcn-keyring\n```\n\n ### 安装AUR包管理器\n ```\n sudo pacman -Sy yay paru\n ``` \n \n","tags":["Linux"],"categories":["Linux"]},{"title":"Archlinux安装指南","url":"/posts/a907d758.html","content":"\n## 初步配置\n\n#### 联网\n\n ```\n dhcpcd/iwctl\n ```\n\n> iwctl:\n> device list\n> station 'device' scan\n> station 'device' get-networks\n> station 'device' connect 'wlan'\n\n#### 更新ntp服务器\n ```\n timdatectl set-ntp true\n ```\n\n## 分区及挂载\n\n> 此处演示p1:EFI p2:/mnt p3:swap\n\n#### 查看目前磁盘，分区状况\n```\nlsblk\n```\n\n#### 分区\n ```\n fdisk /dev/sdX / fdisk /dev/nvme0n1\n ```\n\n> m 查看命令\n> n 新建一个分区\n> g 转换GPT\n> t 更改分区类型：EFI:1  SWAP:19  Linux:20\n\n#### 格式化分区为FAT32格式\n ```\n mkfs.fat -F32 /dev/nvme0n1p1\n ```\n\n#### 格式化分区为EXT4格式\n ```\n mkfs.ext4 /dev/nvme0n1p2\n ```\n\n#### 格式化分区为SWAP格式\n ```\n mkswap /dev/nvme0n1p3\n ```\n\n#### 开启SWAP\n ```\n swapon /dev/nvme0n1p3\n ```\n\n#### 挂载根分区\n ```\n mount /dev/nvme0n1p2 /mnt\n ```\n\n#### 新建Boot文件夹\n ```\n mkdir /mnt/boot\n ```\n\n#### 新建Home文件夹\n ```\n mkdir /mnt/home\n ```\n\n#### 挂载Boot分区\n ```\n mount /dev/nvme0n1p1 /mnt/boot\n ```\n\n> 如果有的话一个分区为了Home分区 ```mount /dev/nvme0n1px /mnt/home```\n\n\n\n## 开始安装\n\n#### 编辑镜像源\n\n ```\n nano /etc/pacman.d/mirrorlist\n ```\n\n#### 拉取镜像\n\n ```\n pacstrap /mnt base base-devel linux linux-firmware vi nano\n ```\n\n#### 更新分区表\n\n ```\n genfstab -U /mnt >> /mnt/etc/fstab\n ```\n\n#### 检查分区表\n\n ```\n cat /mnt/etc/fstab\n ```\n\n#### 下载基本软件\n\n ```\n pacman -S vim networkmanager dhcpcd\n ```\n\n\n\n## 切换到本地\n\n ```\n arch-chroot /mnt\n ```\n\n#### 更新本地时间\n\n ```\n ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n ```\n\n ```\n hwclock --systohc\n ```\n\n#### 编辑locale.gen\n ``` \n nano /etc/locale.gen\n ```\n\n**找到 `en_US.UTF-8` 和 `zh_CN.UTF-8` 去掉前面的#**\n\n#### 更新\n ```\n locale-gen\n ```\n\n#### 编辑locale.conf文件\n ```\n nano /etc/locale.conf\n ``` \n >写入 `LANG=en_US.UTF-8`\n\n#### 设置root密码\n\n ```\n passwd\n ```\n\n> 不显示密码是正常情况\n\n#### 下载基本软件\n\n ```\n pacman -S dialog wpa_supplicant ntfs-3g\n ```\n\n#### 安装CPU驱动\n\n##### intel\n ```\n pacman -S intel-ucode\n ```\n\n##### amd\n ```\n pacman -S amd-ucode\n ```\n\n\n\n## 安装引导\n\n ```\n pacman -S grub efibootmgr\n ```\n\n#### 多系统引导\n ```\n pacman -S os-prober\n ```\n\n#### UEFI引导\n ```\n grub-install --target=x86_64-efi --efi-directory=/boot --bootloader=ArchLinux\n ```\n\n#### 更新grub\n ```\n grub-mkconfig -o /boot/grub/grub.cfg\n ```\n\n\n\n## **至此 安装结束**\n\n#### 退出\n ```\n exit\n ```\n\n#### 重启\n ```\n reboot\n ```\n\n","tags":["Linux"],"categories":["Linux"]},{"title":"Switch-SteamLibrary","url":"/posts/2a1b98b0.html","content":"# Switch-SteamLibrary\n\n> 这是一个用于电脑中有多Linux系统，并且希望自己的游戏统一存放在NTFS格式盘的小脚本。它旨在可以让你的多Linux系统，包括Windows都可以调用一个同一个Steam游戏库的小脚本。\n\n\n### 使用说明:\n\n```\ngit clone https://github.com/k7tmiz/Switch-SteamLibrary.git\n```\n\n```\ncd Switch-SteamLibrary\n```\n\n#### 使用文本编辑器进行编辑\n\n```\nsudo vim setup_steam_link.sh\n```\n\n**STEAM_DIR**：代表你当前系统steam所在的地址  \n\n**SHARED_DIR**：代表你想调用的游戏库地址  \n\n**只须调整这两个参数便可以正常使用该脚本**  \n\n#### 提权\n```\nchmod +x ./setup_steam_link.sh\n```\n\n#### 运行\n```\n./setup_steam_link.sh\n```\n\n> 参考：[Proton-Wiki](https://github.com/ValveSoftware/Proton/wiki/Using-a-NTFS-disk-with-Linux-and-Windows)\n","tags":["Linux","Tech"],"categories":["Linux"]},{"title":"MSI-PERKEYRGB","url":"/posts/5a88bde.html","content":"# MSI-PERKEYRGB\n\n> 适用于我MSI-GP68HX的键盘RGB调光的git项目\n\n下面是Github的项目地址： [msi-perkeyrgb](https://github.com/Askannz/msi-perkeyrgb)\n\n- - -\n### 安装教程这里就掠过\n\n### 简单用法\n\n#### Steady Color：稳定颜色\n\n```\nmsi-perkeyrgb --model <MSI model> -s <COLOR>\n```\n#### Preset：内置预设(--list-presets)\n\n```\nmsi-perkeyrgb --model <MSI model> -p <preset>\n```\n### 高级用法不多赘述 个人用不到\n\n- - -\n### 个人电脑键盘预设配色如下：\n\n- aqua\n- chakra\n- default\n- disco\n- drain\n- freeway\n- rainbow-split\n- roulette\n\n### 如果你的电脑也没有被录入的话 可以通过id的方式进行使用。\n\n注意：这里是十六进制的数字 --id VENDOR_ID:PRODUCT_ID\n\n```\n例 sudo msi-perkeyrgb --id 1038:113a -p rainbow-split\n```\n\n","tags":["Linux","Tech"],"categories":["Tech"]},{"title":"Nativefier 使用教程","url":"/posts/b56059f9.html","content":"# Nativefier 使用教程\n\n#### 基于electron的打包软件\n\n##### nativefier -n <打包后的应用名称> -p <程序兼容的平台> —-arch <架构> —- weight <窗口宽度> —-height <窗口高度> <网页URL>\n\n#### 实例（Eshelper）\n\nnativefier -n Eshelper -p linux --arch x64 --width 1024 --height 768 --tray\n\\--disable-dev-tools <https://www.esdict.cn/>\n\n\\#如果想让程序可以后台运行，可以增加参数——tray\n\n\\#如果不想在使用时可以调出chrome的开发者工具，可以增加参数——disable-dev-tools\n\n\\#如果想控制程序在同一时间只能运行一个实例，则增加参数——single-instance\n\n#### .desktop文件（Linux下启动文件）\n\n\\[Desktop Entry]\n\n\\# type关键字如上所述\n\nType=Application\n\n\\# 本文件所遵循的桌面项规范版本\n\nVersion=1.0\n\n\\# 应用程序的名称\n\nName=jMemorize\n\n\\# 显示为工具提示的注释\n\nComment=Flash card based learning tool\n\n\\# 可执行文件所在的目录\n\nPath=/opt/jmemorise\n\n\\# 可执行文件，可以带参\n\nExec=jmemorize\n\n\\# 图标名称\n\nIcon=jmemorize\n\n\\# 应用程序是否需要运行在终端中\n\nTerminal=false\n\n\\# 本桌面项将显示在哪些分类中\n\nCategories=Education;Languages;Java;\n\n#### .desktop文件存放位置\n\n/usr/share/applications/\n\n","tags":["Tech"],"categories":["Tech"]}]