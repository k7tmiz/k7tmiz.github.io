{"meta":{"title":"k7tmiz","subtitle":"k7tmiz Blog","description":"一些碎碎念","author":"k7tmiz","url":"https://k7tmiz.github.io","root":"/"},"pages":[{"title":"About Me","date":"2025-05-11T11:21:57.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"about/index.html","permalink":"https://k7tmiz.github.io/about/index.html","excerpt":"","text":"k7tmiz.com ✨👋 欢迎来到我的个人小站！ 📖 关于本站这里是 k7tmiz 的个人网站&#x2F;博客&#x2F;作品集。 我创建这个网站是为了 分享我对Linux、计算机编程的思考与见解。 记录我的学习历程和成长点滴。 展示我参与或独立完成的项目和作品。 与志同道合的朋友交流与学习。 旅游轨迹等等 希望你在这里能找到感兴趣的内容，并有所收获！ 👤 关于我我是一名文科的学生。 我对开源技术、AI、文学艺术、旅行探索、语言等充满热情。 🚀 主要内容你可以在本站找到以下类型的内容： ✍️ 博客文章：关于 Linux、西班牙语、编程等方面的技术分享。 💡 项目展示：暂无上传 📚 学习笔记：记录我在学习Linux过程中的心得与总结。 🖼️ 作品&#x2F;相册：暂无上传 🔗 资源分享：我觉得有价值或有趣的工具、网站、书籍或文章推荐。 💬 交流与反馈我非常乐意与你交流！如果你对网站内容有任何疑问、建议，或者想讨论相关话题，欢迎通过以下方式联系我，或者在文章下方留言： 邮箱：kcyx01@gmail.com 🙏 致谢感谢所有为这个网站的诞生和运营提供过灵感、帮助和支持的朋友们！ 特别感谢 Hexo 框架 和 hexo-theme-next 我的父母，家人和一路上陪伴我的老师和朋友 感谢你的来访，希望你喜欢这里！😊"},{"title":"Categories","date":"2025-05-11T11:22:48.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"categories/index.html","permalink":"https://k7tmiz.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2025-05-11T11:21:46.000Z","updated":"2025-08-21T18:03:56.143Z","comments":true,"path":"tags/index.html","permalink":"https://k7tmiz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"谈谈我为什么放弃了无纸化学习","slug":"Article-谈谈我为什么放弃了无纸化学习","date":"2025-08-25T10:38:03.000Z","updated":"2025-08-25T10:39:49.160Z","comments":true,"path":"posts/4fa1af2a.html","permalink":"https://k7tmiz.github.io/posts/4fa1af2a.html","excerpt":"如标题所见，我最终还是放弃了无纸化学习。这个决定并非一时兴起，而是经历了反复尝试与深刻反思之后的结果。很多人称赞数字化工具的便捷与环保，我也曾满怀期待地拥抱这一切，却发现它并不如想象中那般适合我。原因很多，听我一一道来。 作为24年高考生，我高考结束以后便在网络上搜寻大学的高效率学习模式，然而作为一名文科生，电脑的使用率较低，而平板和手写笔成为了我的首选。 刚进入大学的前两个星期，大约是新鲜期，那时候基本上使用率比较高，原因或许是内容强度不高，记忆难度小。直到大一上学期过完，回到学校以后，情况开始有所改变。","text":"如标题所见，我最终还是放弃了无纸化学习。这个决定并非一时兴起，而是经历了反复尝试与深刻反思之后的结果。很多人称赞数字化工具的便捷与环保，我也曾满怀期待地拥抱这一切，却发现它并不如想象中那般适合我。原因很多，听我一一道来。 作为24年高考生，我高考结束以后便在网络上搜寻大学的高效率学习模式，然而作为一名文科生，电脑的使用率较低，而平板和手写笔成为了我的首选。 刚进入大学的前两个星期，大约是新鲜期，那时候基本上使用率比较高，原因或许是内容强度不高，记忆难度小。直到大一上学期过完，回到学校以后，情况开始有所改变。 大一下的内容强度逐渐上升，而我逐渐发现，使用平板的学习效率不升反降。电子产品给我这种不太自律的人来讲带来的干扰远高于帮助—消息通知，翻译时候的懒惰，甚至只是搜索一个东西，我的思绪就已经抽离出课堂了。而在纸上书写时，没有那么多顾虑，没有那么多干扰，注意力更持久。我逐渐明白，无纸化学习并不适合每一个人。真正的”高效率”学习不是看书时有多方便，而是看书的时候能看多久，能学进去多少。 更重要的是，无纸化学习的过程让我的学习开始“走马观花”。这种虚拟的数字化“纸笔”并没有真实的书写触感，在屏幕上划重点，复制粘贴，直接截屏等操作，看似方便，实则丧失了主动吸纳的环节。相反，笔尖在纸上划过留下的沙沙声，迫使我去思考，归纳。一笔一划之间，知识不再是高高在上，划过眼前的信息，而转化成了实体，逐渐内化成我的东西。这种真实，踏实的感觉，是手写笔在屏幕上无法企及的地方。 不仅如此，无纸化学习的体验也比较一般。大学的很多课本没有电子版，还是需要我背不少的书。扫描的代价也很大，麻烦并且不够清晰。最后不得不背—既没有方便，同时也不便携，每天依旧要背着装满课本的背包去上课，根本不可能只带一个平板。 书写体验更是一坨。为了在这块玻璃屏幕上好好写字不打滑，我给过许多尝试。买过许多替代笔尖，许多笔尖套，类纸膜等等。所需开销比一本一笔高的很多，也并不自如。更不用说其他—购买时候的价格，触控笔，笔记会员，云存储的服务，累积下来性价比也并不高。书写的反馈也很弱很弱。 我并非否认无纸化学习，存在即合理。但我认为时至今日，他也不一定适用于每一个学习者。对我而言，纸，是思考的空间；笔，是理解的延申。退回传统，并非倒退，而是选择了一条适合我的路。","categories":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/categories/Article/"}],"tags":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/tags/Article/"}]},{"title":"如何在Linux上优雅的使用小黄鸭","slug":"Linux-如何在Linux上优雅的使用小黄鸭","date":"2025-07-19T08:50:55.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/5982c65e.html","permalink":"https://k7tmiz.github.io/posts/5982c65e.html","excerpt":"前言起因我在小黑盒看到了一个给SteamDeck开发的小黄鸭插件,然后我就想着Linux上面肯定也有 插件:decky-lossless-scaling-vk","text":"前言起因我在小黑盒看到了一个给SteamDeck开发的小黄鸭插件,然后我就想着Linux上面肯定也有 插件:decky-lossless-scaling-vk 我就去找了一下,真让我找到一个能在Linux上使用的小黄鸭插件,我立刻进行了尝试 教程就是lsfg-vk项目 这个项目把Lossless Scaling这个项目引入了Linux 安装 (ArchLinux完全可用)安装依赖 1$ sudo pacman -S base-devel git clang llvm cmake ninja spirv-headers vulkan-headers vulkan-icd-loader 脚本安装 1curl -sSf https://pancake.gay/lsfg-vk.sh | sh Wikihttps://github.com/PancakeTAS/lsfg-vk/wiki 如果提示你DLL文件有问题找不到,首先你得去Steam购买Lossless Scaling,其次你可以安装在本地,这样你就不需要去再配置,如果你不想安装在Steam安装的位置,也可以修改 ~/.config/lsfg-vk/conf.toml 配置文件进行配置 123456789101112131415161718192021222324252627282930313233version = 1[global]# override the location of Lossless Scaling# dll = &quot;/games/Lossless Scaling&quot;# [[game]] # example entry# exe = &quot;Game.exe&quot;# env = &quot;SteamDeck=0&quot;## multiplier = 3# flow_scale = 0.7# performance_mode = true# hdr_mode = false## experimental_present_mode = fifo# experimental_fps_limit = 48[[game]] # default vkcube entryexe = &quot;vkcube&quot;multiplier = 4performance_mode = true[[game]] # default benchmark entryexe = &quot;benchmark&quot;multiplier = 4performance_mode = false[[game]] # override Genshin Impactexe = &quot;Genshin&quot;multiplier = 3 Property Recommended Value Description dll Path to Lossless.dll or empty 如果您未将 Lossless Scaling 安装到传统目录中，则可以使用此属性覆盖游戏文件中 Lossless.dll 文件的路径 multiplier (1, )2, 3, 4 将FPS 翻倍、三倍或四倍。想怎么高就怎么高。 performance_mode trueorfalse 将帧生成模型切换为更轻的模型。这可以显著提高性能（速度在 2 到 8 倍之间，具体取决于分辨率）。质量略有下降 hdr_mode 使用 HDR 时为 1 将着色器切换到 HDR 模式（不支持 scRGB）。不使用 HDR 时不要设置此标志 验证安装在没有 lsfg-vk 的情况下运行此程序，并在心中记下立方体旋转的速度： 12$ DISABLE_LSFG=1 vkcube# (stop it with ctrl-c in the terminal, or Escape in the window) 接下来，再次运行此程序，看看立方体旋转速度是否变慢： 12$ vkcube# (stop it with ctrl-c in the terminal, or Escape in the window) 默认配置允许在 vkcube 上生成 4 倍帧。如果多维数据集没有明显减慢速度，则表示您没有正确安装 lsfg-vk 使用方法在你需要使用的Steam游戏的启动选项上加上 ENABLE_LSFG=1 例如: ENABLE_LSFG=1 gamemoderun %command%","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[]},{"title":"在Linux上优雅的使用Wemod","slug":"Linux-在Linux上优雅的使用Wemod","date":"2025-07-09T14:43:46.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/400b687c.html","permalink":"https://k7tmiz.github.io/posts/400b687c.html","excerpt":"引言最近在玩Escape the backroom,里边那个耐力真的很难受,所以开了个无限耐力的,但是我不想在windows下游玩,我就去找了一下linux下的wemod的替代品,结果找到了这个项目wemod-launcher,现在想写一篇博客介绍一下怎么使用它 教程","text":"引言最近在玩Escape the backroom,里边那个耐力真的很难受,所以开了个无限耐力的,但是我不想在windows下游玩,我就去找了一下linux下的wemod的替代品,结果找到了这个项目wemod-launcher,现在想写一篇博客介绍一下怎么使用它 教程首先我们需要一个 Python容器 ,在linux下我使用的是 python-venv 以下演示基于ArchLinux 1. 先装所需的依赖包1sudo pacman -Sy tk 然后把项目拉到本地 1git clone https://github.com/DeckCheatz/wemod-launcher.git 创建一个虚拟容器 1python -m venv wemod-launcher 切换 1source wemod-launcher/bin/activate.fish 因为我用的是fish所以这里用.fish,如果 这时你的python容器和wemod容器在同一个文件夹中 2. GE-Proton建议使用GE-Proton,通过 Protonup-qt 来安装GE-Proton 1yay -S protonup-qt 3. 重启1reboot 4. 准备先查看 wemod-launcher 的目录 1readlink -f wemod-launcher 改成可执行权限 1chmod -R ug+x wemod-launcher 5. 更改设置 在Steam库中,兼容性选项中,强制使用你刚才下载的GE-Proton版本 在 Launch Options （启动选项 ） 下，输入 &#123;path/to/wemod-launcher&#125;/wemod %command% 6. 开游戏 如果 “copy prefix question” 出现并显示 might work ，请选择 “no” 如果它提到 可能有效 （或更好），就可以直接安全地忽略所有 rundll32.exe 错误（通过单击 no） 选择 Download 选择 Yes&#x2F;Ok 直到不再显示窗口 可以安全地忽略所有 rundll32.exe 错误（通过单击 no） Wemod应该能启动了 7. 登录Wemod (仅一次)现在你应该就可以正常使用你的Wemod来爽快的进行游戏了 遇到问题请自行查看: Config Usage","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"在Linux上优雅的使用Zotero","slug":"Linux-在Linux上优雅的使用Zotero","date":"2025-06-13T07:35:38.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/9ccc8650.html","permalink":"https://k7tmiz.github.io/posts/9ccc8650.html","excerpt":"引言由于我选的一个课需要我现在大一就写论文，我就在寻找在Linux上的文献管理方案。在gitee上找到了一个项目Zotero-WPSJS 感谢大佬的付出","text":"引言由于我选的一个课需要我现在大一就写论文，我就在寻找在Linux上的文献管理方案。在gitee上找到了一个项目Zotero-WPSJS 感谢大佬的付出 教程 安装 Clone项目 安装插件 Chrome插件(可选) 安装首先在你使用的发行版上安装Zotero Arch: 1yay -S zotero-bin Flatpak(没有尝试过，不确保可用): 1flatpak install flathub org.zotero.Zotero Clone项目Zotero-WPSJS 1git clone https://gitee.com/wangrui5015/Zotero-WPSJS.git 挂载进目录，然后 安装插件安装 1python install.py WPS中的效果： 记得按提示给JS插件权限 Chrome插件(可选)","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"KDE美化教程","slug":"Linux-KDE美化教程","date":"2025-06-09T07:46:30.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/a3d041ec.html","permalink":"https://k7tmiz.github.io/posts/a3d041ec.html","excerpt":"前言KDE是我接触Linux以来接触的较早，并且最多的一个桌面环境了。几乎每次安装所有系统，我都是首选KDE 原因就在于其友好，强大，美观，操作逻辑简单。","text":"前言KDE是我接触Linux以来接触的较早，并且最多的一个桌面环境了。几乎每次安装所有系统，我都是首选KDE 原因就在于其友好，强大，美观，操作逻辑简单。 再离开Linux这一年，没想到已经更新到了KDE6，刚回归的时候也走了一些弯路，现在我将制作一个教程以便自己的使用，也欢迎大家参考！ 效果 插件极少，相对来讲确实有点macOS那个感觉？ 教程Dock底部dock 启动器图标:archlinux-artwork 顶部应用程序菜单栏顶部按顺序 bar-全局菜单-间距-系统托盘-数字时钟-搜索-注销 插件就两个，一个是 Panel colorizer 另一个是 Application Title Bar 都可以在KDE自带的官方插件商店找到 Panel colorizer改底部dock,背景去掉Application Title Bar设置如下 系统配色就这个 WhiteSur-kde 系统设置中—颜色与主题 全局主题我选的Breeze微风 颜色和Plasma外观样式我选择的是WhiteSur-alt 苹果 特效系统设置中—窗口管理—桌面特效 惯性晃动 粉碎动画 背景虚化 窗口透明度 这个之前调的时候好像有bug？反正我没动 最小过渡动画-神灯 窗口后滑动效 终端 终端字体：点击下载 ref: nerd-fonts neofetch配置文件点击下载里边的内容替换 ~/.config/neofetch/config.confref: neofetch-themes 壁纸鄙人倒是收集了一些壁纸，可以直接clone下来 1git clone https://github.com/k7tmiz/WallPaper.git 以后还能想起啥再补吧…","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[]},{"title":"KDE崩溃了怎么办","slug":"Linux-KDE崩溃了怎么办","date":"2025-06-09T06:48:03.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/fff51a63.html","permalink":"https://k7tmiz.github.io/posts/fff51a63.html","excerpt":"起因因为这个Wallpaper Engine暂时没有适配Linux端，所以我就一直在用这个第三方的插件 因为SteamOS也是基于ArchLinux的，那我用Arch的，拿儿子点东西不过分哈","text":"起因因为这个Wallpaper Engine暂时没有适配Linux端，所以我就一直在用这个第三方的插件 因为SteamOS也是基于ArchLinux的，那我用Arch的，拿儿子点东西不过分哈 ref： SteamOS-wallpaper-engine-kde-plugin 然后有的壁纸用了会崩溃死机，以下几条命令或许能帮到你 我已经全面迁移到了Wayland环境，如果用X11,请自行类比或退出自行搜索哈 开始重启kwinKDE桌面按下 Alt+Space 输入： 1kwin_wayland --replace kwin就会重启，这时百分之八十的问题都能解决掉 还是不行？Plasma Shell崩溃了？？如果在KDE桌面可以通过快捷键 Ctrl+Alt+T 快速打开 Konsole 或者 Alt+Space 然后搜索 Konsole 打开也可以 以下命令重启 plasmashell 1kstart5 plasmashell 有挂起的进程就先 kill 掉，再重启： 1killall plasmashell &amp;&amp; kstart5 plasmashell KDE小组件崩溃了？重启解决百分之九十九的问题 1killall plasmashell &amp;&amp; kstart5 plasmashell 1reboot 以上方法简单粗暴，懵逼不伤脑 祝好运","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"}]},{"title":"GIT提交时不用输入用户名密码的方法","slug":"Tech-GIT提交时不用输入用户名密码的方法","date":"2025-06-07T13:23:05.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/87bb185d.html","permalink":"https://k7tmiz.github.io/posts/87bb185d.html","excerpt":"起因每次git push都要用用户名和密码，每次都要去复制一下然后粘贴过去… 是真的很烦人 教程","text":"起因每次git push都要用用户名和密码，每次都要去复制一下然后粘贴过去… 是真的很烦人 教程 进入项目的目录:以Hexo举例 1cd Hexo 输入以下命令: 1git config credential.helper store 也可以加上 --global 只对全局生效，不带就是只对当前库生效 .git 文件夹下的 .config 文件应该多了两行 12[credential] helper = store git push 到远程仓库，输入正确的用户名和密码 再次运行 git push 就不需要用户名密码了 回到用户主目录发现多了一个 .git-credentials 这个就是用来存储用户名和密码的 ref: GIT提交时不用输入用户名密码的方法","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[]},{"title":"Git 常用命令详解","slug":"Tech-Git-常用命令详解","date":"2025-06-07T12:48:52.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/c819bd8f.html","permalink":"https://k7tmiz.github.io/posts/c819bd8f.html","excerpt":"Git 常用命令介绍Git 是一个分布式版本控制系统，广泛用于软件开发中的代码管理。以下是一些常用的 Git 命令，按照逻辑顺序和常用次序进行介绍，帮助您更好地理解和使用 Git。 1. git clone","text":"Git 常用命令介绍Git 是一个分布式版本控制系统，广泛用于软件开发中的代码管理。以下是一些常用的 Git 命令，按照逻辑顺序和常用次序进行介绍，帮助您更好地理解和使用 Git。 1. git clonegit clone 用于从远程仓库克隆一个项目到本地。这是您开始使用 Git 项目时的第一步。 常规用法：1git clone &lt;repository_url&gt; 说明：&lt;repository_url&gt; 是远程仓库的 URL，克隆后会在本地创建一个与远程仓库同名的目录，并下载所有文件和提交历史。 2. git addgit add 用于将工作区的更改添加到暂存区，准备进行提交。 常规用法：1git add &lt;file&gt; 说明：&lt;file&gt; 是您要添加的文件或目录。可以使用 git add . 将所有更改添加到暂存区。 3. git commitgit commit 用于将暂存区的更改提交到本地仓库，并记录提交信息。 常规用法：1git commit -m &quot;提交信息&quot; 说明：-m 选项后跟提交信息，描述本次提交的更改内容。 4. git pushgit push 用于将本地的提交推送到远程仓库。 常规用法：1git push origin &lt;branch_name&gt; 说明：origin 是远程仓库的名称，&lt;branch_name&gt; 是要推送的分支名称。 5. git pullgit pull 用于从远程仓库拉取最新的更改并合并到本地仓库。 常规用法：1git pull origin &lt;branch_name&gt; 说明：origin 是远程仓库的名称，&lt;branch_name&gt; 是要拉取的分支名称。 6. git remotegit remote 用于管理远程仓库，例如查看、添加或删除远程仓库。 常规用法： 查看远程仓库：1git remote -v 添加远程仓库：1git remote add &lt;name&gt; &lt;url&gt; 删除远程仓库：1git remote remove &lt;name&gt; 说明：&lt;name&gt; 是远程仓库的名称，&lt;url&gt; 是远程仓库的 URL。 7. git resetgit reset 用于重置暂存区或工作区的状态，常用于撤销更改。 常规用法： 撤销暂存区的更改：1git reset &lt;file&gt; 撤销提交（软重置）：1git reset --soft &lt;commit&gt; 撤销提交并重置工作区（硬重置）：1git reset --hard &lt;commit&gt; 说明：&lt;file&gt; 是要重置的文件，&lt;commit&gt; 是要重置到的提交哈希或引用。 8. git mergegit merge 用于合并分支，将一个分支的更改合并到当前分支。 常规用法：1git merge &lt;branch_name&gt; 说明：&lt;branch_name&gt; 是要合并的分支名称。 9. git rmgit rm 用于删除文件并将删除操作添加到暂存区。 常规用法：1git rm &lt;file&gt; 说明：&lt;file&gt; 是要删除的文件。删除后需要使用 git commit 提交更改。 10. git rebasegit rebase 用于变基，将一个分支的提交历史应用到另一个分支的顶部，常用于整理提交历史。 常规用法：1git rebase &lt;base_branch&gt; 说明：&lt;base_branch&gt; 是要变基到的基础分支。 以上是 Git 的一些常用命令及其常规用法。掌握这些命令将帮助您更高效地管理代码版本和协作开发。 以上内容由AI整理","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"关于Spotify桌面端的美化","slug":"Tech-关于Spotify桌面端的美化","date":"2025-06-05T09:55:18.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/4795de82.html","permalink":"https://k7tmiz.github.io/posts/4795de82.html","excerpt":"简单的开头：为什么我切换到了Spotify前两天，我收到了一条短信 由于Linux端的网易云已经年久失修，最新的一个官方包大概是七八年前维护的，无论是功能性还是美观度都无法支撑我继续使用。wine模拟出的官方版有时候占用也比较高，Splayer就成为了我的首选。","text":"简单的开头：为什么我切换到了Spotify前两天，我收到了一条短信 由于Linux端的网易云已经年久失修，最新的一个官方包大概是七八年前维护的，无论是功能性还是美观度都无法支撑我继续使用。wine模拟出的官方版有时候占用也比较高，Splayer就成为了我的首选。 据说是因为这个 听歌打卡 的功能，但我也不好说到底是不是这个原因… 于是我就投入了Spotify的怀抱 其实很早之前就在用mod版本，但是经过这么一出，没忍住直接冲了年会员 而且Spotify的推荐算法简直无敌，歌库也很全，多端同步也超级无敌，一年价格也能接受，Linux端也有很多东西可玩，那我就来了 安装SpotifyArchLinux1sudo pacman -S spotify-launcher FlatpakSpotify 1flatpak install flathub com.spotify.Client Spicetify插件原生的Linux版本的Spotify也太丑了… 于是我就去网上找类似的插件，意图稍微的美化一下 官网：Spicetify 安装由于我是Linux端，所以直接： 1curl -fsSL https://raw.githubusercontent.com/spicetify/cli/main/install.sh | sh 问你要不要安装 Marketplace 直接Y 然后安完了应该是提示你 1spicetify backup apply 这里Flatpak版本还要多一步加权限，否则 spicetify backup apply 会运行失败 1sudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/ 1sudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/Apps -R 还有可能会提示你 spotify_path 或者 prefs_path 有问题，你只需按照它的提示找到那个 ~/.config/spicetify/config-xpui.ini 文件然后修改即可 参考：Installation 至此应该就是安好了 美化进来点上面的购物车按钮，安装以下几个： 扩展我只装了这个 装别的主题之前似乎都得装这个… 然后我用的这个 Lucid 最后就这两个小东西 效果","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"记录我电脑外放消失的一次","slug":"Tech-记录我电脑外放消失的一次","date":"2025-05-30T16:19:59.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/8c7c6a2b.html","permalink":"https://k7tmiz.github.io/posts/8c7c6a2b.html","excerpt":"很偶然的发现 起因起因是我要做pre,然后昨天晚上十二点半去楼道的自习室加班加点，然后当时刚好忘记带耳机了，大半夜也没什么人，我就打算外放了，然后没声音，我还以为是系统bug,重启了一下，发现还是没声，没管它接着弄了…回到宿舍插上耳机又有声音了？？？","text":"很偶然的发现 起因起因是我要做pre,然后昨天晚上十二点半去楼道的自习室加班加点，然后当时刚好忘记带耳机了，大半夜也没什么人，我就打算外放了，然后没声音，我还以为是系统bug,重启了一下，发现还是没声，没管它接着弄了…回到宿舍插上耳机又有声音了？？？ 到这我还不是很确定… 然后第二天中午回来发现还是不行，我就打算排除法，因为我是多Linux➕Win的配置，我从Arch出去先进了Fedora,发现还是没声。我就排除系统问题了。然后又进Win发现还是一样没声。最后进了SUSE，这个我当时所有系统都崩了就它没事的超稳定系统，同样不能用… 我就用了很多命令然后发现，硬件都是正常的？？？我就觉着可能是硬件坏了。但是插上耳机还是有音频输出，jack detect也没问题，就是外放不了？？ 然后管不了那么多了，我着急用pre,匆忙做完下午去上专业课了。 下了专业课回到寝室接着排查，然后最终决定放弃，不带电脑去中心上课了。 然后下课回来路上刷到一篇帖子，说是静电问题，回来放了一下静电就好了… GPT的建议电脑本身在正常使用中不会频繁积累危险级别的静电（ESD），但定期给电脑释放静电可以降低潜在的硬件风险，尤其是在以下几种情况下： ✅ 建议给电脑释放静电的时机 更换或安装硬件前（如加内存、换硬盘） *必须释放静电，否则有可能损坏主板、内存或其他敏感元件。 电脑出现异常问题，如： 无法开机、USB设备识别异常、扬声器无声、电源灯亮但无反应； 这些可能是“软性静电锁定”导致主板处于保护状态。 长时间未关机、处于待机状态超过一周时 有时电荷会在电源线路中缓慢积累。 环境干燥、冬天、穿化纤衣服经常接触电脑 更容易产生人体静电放电。 🕓 多久放一次静电比较合适？ 日常使用：不需要频繁释放，一般每月一次或每次电脑出现异常时操作即可。 高风险环境（冬季&#x2F;干燥&#x2F;有明显静电打火感）：每周一次或者每次使用前摸一下金属物体（如桌脚或插排外壳）做人体放电。 ⚙️ 如何给电脑释放静电？台式机： 完全关机并拔掉电源线； 按住电源键不松手 10~30 秒，让主板和电源的余电释放； 如果还要打开机箱操作，建议佩戴防静电手环或触摸金属机箱外壳。 笔记本电脑： 关机 → 拔掉充电器； 如可拆卸电池，先拔电池； 同样长按电源键 10~30 秒； 再重新装好电池或接上电源即可。 ✅ 总结 情况 建议释放静电频率 日常无异常使用 每月一次或无需频繁操作 干燥环境、静电多 每周一次 换硬件、电脑异常 当次操作前务必释放 如果你电脑近期频繁出现扬声器无声、USB异常等问题，建议你现在就做一次释放静电操作试试，看是否能解决问题。","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"高考一年后有感","slug":"Article-高考一年后有感","date":"2025-05-29T11:52:18.000Z","updated":"2025-08-25T10:40:28.725Z","comments":true,"path":"posts/e74fd7e6.html","permalink":"https://k7tmiz.github.io/posts/e74fd7e6.html","excerpt":"防喷设置鄙人的文笔不是十分优秀，博客只是写给自己看的… 回忆","text":"防喷设置鄙人的文笔不是十分优秀，博客只是写给自己看的… 回忆今天是2025年5月29号，翻开回忆角落，疲惫的生活… 打开自己的相册，看到了5月29号当天自己相册的内容 凌晨的我对着一根笔拍了一张照，照片中的笔芯用胶带裹上作为标记，其展示出了当时我一支笔狠狠学一天能用多少。高三那会的我确实很喜欢买各种各样的笔 晚上9：25,一张照片关于我们高中语文年级组汇编的高三语文试题本，封面被我很好的朋友用各种各样颜色的笔，大大小小写满了我的名字…就不放出来了，保护自己的隐私 其实现在的我已经想不起什么高中的很多事情了，能记起的只有回忆起来的美好瞬间和高三最后那段时间自己的努力。 庆幸的是，即使我考到了四川，我和曾经的好友，仍然保持着联系。 真要我说的话，谁又会没点遗憾呢… 走曲 我写这篇的时候距离25年高考还有不到九天，这一年过的真的挺快的，我也适应了很多，成长了许多… 真要说考出北京有什么好处，我想可能是周围并没有那么多你熟悉的同学，或许对于我来讲，平常做事不必太束手束脚了。谁都不欠谁的。 没想到时间过的这么快，我马上都大二了…今日清理相册，指尖触到一张模糊的照片——是当年高考的准考证提示。想来是当时太过激动，镜头都不由得晃动。此刻再看，那股回忆竟压得我心口沉甸甸… 我的记忆瞬间被拉回：五六月的北京，天气很好。我们即将要面临高考，无心顾暇。我埋首于书山题海，只觉时间粘滞如蜜糖，缓慢得令人窒息。桌上那块橡皮，不知何时已被时光悄然啃噬，磨成了细碎的一小粒，散落如微茫的雪。那时心中焦灼翻腾，唯一的念头便是挣脱这千篇一律的煎熬，去远方，去瞧瞧大海的模样。 而当时间终于走完了刻度，24年6月11日的凌晨，我与两位挚友并肩站在渤海边。海风裹挟着咸腥扑面而来，我们静默着，看那轮红日磅礴跃出海平线，将天空与海水一同点燃。那一刻，才猛地惊觉：一切，真的结束了… 那段当时只道是寻常的朝暮，竟如此清晰地烙印在心底——那书页翻动的窸窣，笔尖摩擦的沙沙，连同那粒橡皮的碎屑，原来都是青春自身投下的浓重侧影，已沉沉地、永远地锚定在那里。 人生最是奇诡：曾日夜渴盼挣脱的樊笼，到头来竟成了灵魂归途最清晰的坐标；那些当时以为冗长无尽的煎熬，如今却化作心上最隽永的印痕——如同铅笔在纸面深深刻下的字迹，时光流转，反被岁月擦得愈发清晰、透亮… 加油2025年高考的同学，前程似锦，不留遗憾 拍摄于2024.6.6日12：59 拍摄于2024.6.10日晚21:02 我们仨一拍脑门，高考完当天晚上就到了天津的滨海新区，准备第二天看日出","categories":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/categories/Article/"}],"tags":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/tags/Article/"}]},{"title":"因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项","slug":"Tech-因上传过大文件而导致hexo部署时Spawn-failed报错的解决方法以及注意事项","date":"2025-05-25T11:10:58.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/5618ea3e.html","permalink":"https://k7tmiz.github.io/posts/5618ea3e.html","excerpt":"之前我发布了一篇学习计时器的文章,当时上传的音频我没注意体积有多大，是在hexo d这一步没有成功, warning警告说“GitHub建议上传最大体积为50MB, 上限为100MB”, 很明显我上传的音频文件体积已经超过了100MB. 因此我删掉了那个大文件, 但是当我再次尝试部署时, 还是弹出来一样的warning, 报错文件的路径也和之前的一样, 可是我明明已经删除了那个文件, 后来经过不断的尝试以及在网上搜索, 我找到了一篇和我遇到问题一样的情况因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项 这里再在自己的博客上做一个记录： 首先恢复仓库文件1cd .deploy_git","text":"之前我发布了一篇学习计时器的文章,当时上传的音频我没注意体积有多大，是在hexo d这一步没有成功, warning警告说“GitHub建议上传最大体积为50MB, 上限为100MB”, 很明显我上传的音频文件体积已经超过了100MB. 因此我删掉了那个大文件, 但是当我再次尝试部署时, 还是弹出来一样的warning, 报错文件的路径也和之前的一样, 可是我明明已经删除了那个文件, 后来经过不断的尝试以及在网上搜索, 我找到了一篇和我遇到问题一样的情况因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项 这里再在自己的博客上做一个记录： 首先恢复仓库文件1cd .deploy_git 然后找到自己的 commitid1git log 接着输入命令：1git reset --hard `commitid` 按理来说应该就没有问题可以正常 hexo d 了","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"学习计时器","slug":"Study-学习计时器","date":"2025-05-25T10:11:58.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/f78c38a6.html","permalink":"https://k7tmiz.github.io/posts/f78c38a6.html","excerpt":"学习方法介绍大概是90min学习后再休息20min， 在这90min中，设置一个在3-5分钟内就会响一声的闹钟","text":"学习方法介绍大概是90min学习后再休息20min， 在这90min中，设置一个在3-5分钟内就会响一声的闹钟 响一声后适当闭眼休息十秒 然后再继续学习，循环往复… 音频由于音频文件太大，本座决定把bilibili视频直接搬过来…嘻嘻 .bbplayer{width: 100%; max-width: 850px; margin: auto} document.getElementById(\"mmedia-SqbwNyrowhAqoeMk\").style.height=document.getElementById(\"mmedia-SqbwNyrowhAqoeMk\").scrollWidth*0.76+\"px\"; window.onresize = function(){ document.getElementById(\"mmedia-SqbwNyrowhAqoeMk\").style.height=document.getElementById(\"mmedia-SqbwNyrowhAqoeMk\").scrollWidth*0.76+\"px\"; }; 主页也有计时器版本： 点进去以后： 弃用的原因很简单，因为浏览器会杀后台，所以计时不准确。不过如果一直保持前台，它是完全可用的！ ref： 「随机提示音」视频版（可以在后台播放）","categories":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/categories/Study/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/tags/Study/"}]},{"title":"Linux使用Wayland协议下微信无法正常调用Fcitx5的中文输入法解决办法","slug":"Linux-Linux使用Wayland协议下微信无法正常调用Fcitx5的中文输入法解决办法","date":"2025-05-22T11:58:03.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/ac1a683e.html","permalink":"https://k7tmiz.github.io/posts/ac1a683e.html","excerpt":"我的环境我在用ArchLinux的时候没有遇到这个问题，但是今天突发奇想，想在Fedora42+KDE+Wayland上打游戏的时候，发现自己的微信无法正常调用fcitx5的中文输入法，故来这里记录分享一下自己的经验 废话不多说，直接上图！","text":"我的环境我在用ArchLinux的时候没有遇到这个问题，但是今天突发奇想，想在Fedora42+KDE+Wayland上打游戏的时候，发现自己的微信无法正常调用fcitx5的中文输入法，故来这里记录分享一下自己的经验 废话不多说，直接上图！ 添加环境变量： 1QT_SCALE_FACTOR=1.5 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx 第一个是缩放，因为楼主的电脑是HiDPI屏幕，所以需要缩放1.5倍。后两个就是配置fcitx5的工具，亲测可用！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"如何在Linux下优雅的使用网易云音乐","slug":"Linux-如何在Linux下优雅的使用网易云音乐","date":"2025-05-21T03:45:24.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/e85c1bad.html","permalink":"https://k7tmiz.github.io/posts/e85c1bad.html","excerpt":"目前我所知晓的方法有几种 网页端网易云 用electron封装网页版 第三方客户端(如yesplayer,splayer等) 下载到本地用音乐播放器播放 用wine安装Windows版本 这里网页端的使用方法就不多赘述了，直接点击 网易云音乐 便可进入网页端","text":"目前我所知晓的方法有几种 网页端网易云 用electron封装网页版 第三方客户端(如yesplayer,splayer等) 下载到本地用音乐播放器播放 用wine安装Windows版本 这里网页端的使用方法就不多赘述了，直接点击 网易云音乐 便可进入网页端 这里我们说说后几种方法首先用electron封装不要害怕，我其实有写过一篇帖子来介绍怎么使用一个工具名叫 Nativerfier 的封装工具 帖子如下： Nativefier 使用教程 我没有尝试过把网易云网页版封装成electron程序，我其实更推荐后几种方案… 第三方客户端以Arch Linux为例 我推荐以下几个App(按顺序)： Splayer 项目地址：Splayer 1yay -S splayer-git 一款极其简约好用的音乐播放器，功能丰富操作简单直接，多系统可用，我就通过的AppImage来进行了安装，当然它也被收录到了AUR，我十分喜爱这款软件！ FeelUOwn 项目地址：FeelUOwn 1234yay -S feeluown # 安装稳定版，最新版的包名为 feeluown-gityay -S feeluown-netease # 按需安装其它扩展yay -S feeluown-ytmusicyay -S feeluown-bilibili 一个稳定、用户友好以及高度可定制的音乐播放器。基于文本的歌单，方便与朋友分享、设备之间同步。一键安装，各流行平台均有打包（如 Arch Linux, Windows, macOS 等）但是在我的Arch上使用，会出现网易云无法正常登录的情况，我不知道是个例还是什么情况…但是我仍然认为他的可拓展性很强，值得一个第二 3. YesPlayMusic 项目地址：YesPlayMusic 1yay -S yesplaymusic 高颜值的第三方网易云播放器，支持 Windows &#x2F; macOS &#x2F; Linux ，是我第一款开始使用的软件，问题是偶尔会掉线，然后颜值很高，很简约，但是作者似乎不咋打算更新新功能了，包会有点旧，介意的选前两个(我三个都要😋) 下载到本地然后用播放器不用过多赘述了 接下来用讲讲如何wine安装Windows版本的网易云优势：体验完美，功能齐全，不用担心掉号，不用担心被检测第三方等等，还有HiDPI支持劣势：配置麻烦，转译后可能会有一定的性能损耗 效果如下： KDE的系统托盘也能正常识别使用 开始教学：首先Arch的话通过AUR安装 bottles 这个包 1yay -S bottles Flatpak通过这个命令安装 1flatpak install flathub com.usebottles.bottles 安装好以后打开它，等加载一会 左上角➕号新建一个Bottle，名字随便写,类型选择游戏,运行器选择 wine10 点击运行可执行文件，选择官网直链下载下载下来的exe文件 安装后可以在下面直接打开,也可以添加快捷方式到应用程序菜单中 HiDPI点击设置 高级显示设置 倍数用0.96乘你需要的,这里我需要150%,150x96%&#x3D;144 ref： 网易云音乐最新版 Wine方案 （网易云Beta） 完善于2025年7月29日","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"其实是献给自己的Hexo教程 2","slug":"Tech-其实是献给自己的Hexo教程-2","date":"2025-05-19T00:46:03.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/5e452484.html","permalink":"https://k7tmiz.github.io/posts/5e452484.html","excerpt":"使用git分支保存Hexo源码到Github引言：最开始想弄这个主要是因为我有多系统，多台设备，每次都要把整个文件夹进行压缩备份到U盘，效率低且不够优雅，偶然搜索到两篇帖子，助我解决了这一大难题，这里感谢使用git分支保存hexo博客源码到github 和 hexo源码上传到GitHub 这两篇帖子的编写者！ 那么，教程开始","text":"使用git分支保存Hexo源码到Github引言：最开始想弄这个主要是因为我有多系统，多台设备，每次都要把整个文件夹进行压缩备份到U盘，效率低且不够优雅，偶然搜索到两篇帖子，助我解决了这一大难题，这里感谢使用git分支保存hexo博客源码到github 和 hexo源码上传到GitHub 这两篇帖子的编写者！ 那么，教程开始 教程1. 如图： 2. 然后将其设置成默认分支： 然后你这时候如果直接按照文章来的话，不行，大概率会报错…(问就是试过) 3. 初始化1git init #先初始化 4. 然后将本地Hexo目录与远程仓库关联1git remote add origin https://github.com/k7tmiz/k7tmiz.github.io.git 5. 此时进入目录Ctrl+H 显示所有文件。删掉 .deploy_git 文件夹，如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除。因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就无法正常使用了。根目录中应该有个 .gitignore 文件，如果没有，请自行创建并添加以下内容: 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml 6. 将clone并修改以后的文件夹推送到远程库123git add .git commit –m &quot;Description&quot;git push origin Hexo 此时已经成功将整个网站的源码全部推送到了远程库的默认分支Hexo中 7. 删除public等文件（可选）因为source分支是从master分支新建的，初始代码实际就是master的拷贝，因而master中已有的public等deploy生成的文件也会一起带过来，这些都不算是博客源文件，如果你也觉着source分支还存着这些有些别扭，就可以先在本地把它删掉，然后执行： 123git add .git commit -m &#x27;DEL: public things which only for deploy&#x27;git push origin source 执行完之后，你的仓库大概就是长这个样子： 后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有.gitignore将其忽略了。 8. 新环境假设我们换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过 git clone 将博客源码拉到本地，然后安装、初始化Hexo就能搞定： 12345git clone https://github.com/k7tmiz/k7tmiz.github.io.git Blogcd Blognpm install -g hexo-clinpm install hexo-deployer-git -savenpm install #安装所有依赖模块 插曲，其实不设置成默认的也可以，只不过拉取的时候要git clone -b branch_name source","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"其实是献给自己的Hexo教程","slug":"Tech-其实是献给自己的Hexo教程-1","date":"2025-05-18T14:58:56.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/8b69008.html","permalink":"https://k7tmiz.github.io/posts/8b69008.html","excerpt":"Hexo和Github Pages为什么选择Github Pages？作为一个大学生，其实已经经过了很多尝试，我从初二开始接触Linux,接触服务器，反复搭过很多次自己的网站，但因为学业繁重，最后基本都不了了之…甚至最开始只会用服务器搭建，很多时候没有备份，忘记续费于是资料就全没了。而Github Pages的话，最大的优点就是完全免费！所以你有兴趣的话就继续看下去吧！","text":"Hexo和Github Pages为什么选择Github Pages？作为一个大学生，其实已经经过了很多尝试，我从初二开始接触Linux,接触服务器，反复搭过很多次自己的网站，但因为学业繁重，最后基本都不了了之…甚至最开始只会用服务器搭建，很多时候没有备份，忘记续费于是资料就全没了。而Github Pages的话，最大的优点就是完全免费！所以你有兴趣的话就继续看下去吧！ 科普 Github Pages： GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。你可以在 GitHub 的 github.io 域或自己的自定义域上托管站点。 可以总结为以下几点： Github Pages 是 Github 提供的网页寄存服务，用于存放静态网页，也就是我们的博客。 我们可以使用专业软件将文档转换成静态网页（如：Hexo），然后上传至 Github 最后的结果就像现在这样，你们可以通过我的github.io子域名访问到我生成的静态网页，即本篇博客 Hexo： Hexo 是一款基于 Node.js 的快速、简洁且高效的静态博客框架。 Hexo 使用 Markdown（或其他渲染引擎）解析文章，安装十分方便，配置简单，自定义功能强大，在几秒内，即可利用靓丽的主题生成静态网页。 使用起来的效果就是：我仍然可以使用 Markdown 写博客内容，然后使用部署在本地的Hexo框架进行解析，生成相应的静态网页，最后一键上传即可。 教程开始：Step1: 创建 github 账号和username.github.io 仓库Step2: 在本地部署环境(Linux) 安装: 1sudo pacman -S git npm nodejs 部署Hexo: 1npm install -g hexo-cli 初始化 Hexo 框架: 1hexo init Blog 进入 Blog 文件夹: 1cd Blog 安装依赖: 1npm install 启动 Hexo 服务: 1hexo s Step3: 配置 Next 主题 Github拉取Next主题: 1git clone https://github.com/iissnan/hexo-theme-next themes/next 在根目录的 _config.yml 文件中修改 theme: next Step4: 添加博客内容 将写好的 Markdown 放到 source\\_posts 目录 将相应的图片放到 source\\images 目录 启动 Hexo 服务 Step5: Next主题美化选择Scheme编辑主题配置文件 themes\\next_config.yml ，确定喜爱的Scheme，我选择了Gemini 12345# Schemesscheme: Gemini#scheme: Mist#scheme: Pisces#scheme: Gemini 侧边栏显示当前浏览进度打开 themes/next/_config.yml ，搜索关键字 scrollpercent ,把 false 改为 true 如果想把 top 按钮放在侧边栏，搜索关键字sidebar ,把 false 改为 true 侧边栏加入网易云音乐播放器插件首先在网页搜索网易云音乐，选择音乐或者歌单，并生成外链： 然后得到外链html代码： 将代码粘贴到一个合适的位置，建议放在侧边栏，在Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig文件下，选择位置复制进去，不同位置效果不同： 隐藏网页底部powered By Hexo &#x2F; 强力驱动打开 themes/next/layout/_partials/footer.swig ,使用注释隐藏之间的代码即可，或者直接删除。位置如下： 1234567891011&lt;!--&#123;%- if theme.footer.powered %&#125; &lt;div class=&quot;powered-by&quot;&gt; &#123;%- set next_site = &#x27;https://theme-next.org&#x27; %&#125; &#123;%- if theme.scheme !== &#x27;Gemini&#x27; %&#125; &#123;%- set next_site = &#x27;https://&#x27; + theme.scheme | lower + &#x27;.theme-next.org&#x27; %&#125; &#123;%- endif %&#125; &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;, &#123;class: &#x27;theme-link&#x27;&#125;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme, &#123;class: &#x27;theme-link&#x27;&#125;)) &#125;&#125; &lt;/div&gt;&#123;%- endif %&#125;--&gt; 设定菜单内容编辑主题配置文件 themes\\next_config.yml 123456789menu: #home: / || fa fa-home about: /about/ || fa fa-user tags: /tags/ || fa fa-tags categories: /categories/ || fa fa-th #archives: /archives/ || fa fa-archive #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat 按照上面的方式设置的菜单之后，点击标签，或者关于我都会出现错误页面，那这是怎么回事呢？在默认情况，source 目录只有 _posts 一个文件夹的，并没有生成对应的 tags,about 等文件夹 生成下菜单文件夹的可以了: hexo new page tags 搜索功能1npm install hexo-generator-search --安装插件，用于生成博客索引数据 修改博客配置文件（根目录&#x2F;_config.yml），添加以下代码 12345search: path: search.json field: post format: html limit: 1000 文章自动折叠功能1npm install hexo-excerpt --save 修改博客配置文件（根目录&#x2F;_config.yml），添加以下代码 12345excerpt: depth: 10 excerpt_excludes: [] more_excludes: [] hideWholePostExcerpts: true Hexo-Excerpt 利用Hexo-abbrlink插件生成唯一文章链接Hexo在生成博客文章链接时，默认是按照年、月、日、标题格式来生成的，可以在站点配置文件中指定new_post_name的值。默认是:year&#x2F;:month&#x2F;:day&#x2F;:title这样的格式。如果你的标题是中文的话，你的URL链接就会包含中文。复制后的url路径就是把中文变成了一大堆字符串编码，如果你在其它地方用了你自己这篇文章的url链接，偶然你又修改了该文章的标题，那这个url链接岂不是失效了。为了给每一篇文章来上一个属于自己的链接，可以利用hexo-abbrlink插件，来解决这个问题。 首先安装下hexo-abbrlink 1npm install hexo-abbrlink --save 修改博客配置文件（根目录&#x2F;_config.yml），添加以下代码 1234permalink: post/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 日志的自动分类插件1npm install hexo-auto-category --save 修改博客配置文件（根目录&#x2F;_config.yml），添加以下代码 123auto_category: enable: true depth: 给Hexo博客添加RSS订阅ref：hexo-generator-feed 1npm install hexo-generator-feed --save 然后在 hexo 根目录下的 _config.yml 文件中添加配置 1234567891011121314# RSS订阅feed: enable: true type: atom path: atom.xml limit: 0 hub: content: content_limit: 140 content_limit_delim: &#x27; &#x27; order_by: -date icon: icon.png autodiscovery: true template: 在主题目录的 _config.yml 的menu目录添加 1RSS: /atom.xml || fa fa-rss Hexo插入图片并解决图片的路径问题ref: Hexo插入图片并解决图片的路径问题 1npm install hexo-renderer-marked --save 修改博客配置文件（根目录&#x2F;_config.yml），修改添加以下代码 12345post_asset_folder: truerelative_link: falsemarked: prependRoot: true postAsset: true post_asset_folder: true 执行hexo new post xxx时，会同时生成.&#x2F;source&#x2F;_posts&#x2F;xxx.md文件和.&#x2F;source&#x2F;_posts&#x2F;xxx目录，可以将该文章相关联的资源放置在该资源目录中。 relative_link: false 不要将链接改为与根目录的相对地址。此为默认配置。 prependRoot: true 将文章根路径添加到文章内的链接之前。此为默认配置。 postAsset: true 在post_asset_folder设置为true的情况下，在根据prependRoot的设置在所有链接开头添加文章根路径之前，先将文章内资源的路径解析为相对于资源目录的路径。 举例说明：执行hexo new post demo后，在demo文章的资源路径下存放了a.jpg和cover.jpg（用作封面），目录组织结构如下： 12345./source/_posts├── demo.md└── demo ├── a.jpg └── cover.jpg 在demo.md的适当位置引用这两张图片，指定图片相对路径时需要假设当前目录为.&#x2F;source&#x2F;_posts&#x2F;demo&#x2F;，而不是demo.md文件本身的所在目录。 图片语法:![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;) Github仓库: hexo-renderer-marked Hexo插入音视频等等有图片，那怎么少得了音视频呢 安装插件： 1npm install hexo-tag-mmedia@1 --save 别问为什么不用dplayer和apldayer,原因就是用不了，不兼容新版本 修改博客配置文件（根目录&#x2F;_config.yml），修改添加以下代码 1234567891011121314151617181920212223242526272829303132333435363738394041mmedia: audio: default: video: default: aplayer: js: https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js css: https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css default: contents: meting: js: https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js api: default: dplayer: js: https://cdn.jsdelivr.net/npm/dplayer@1/dist/DPlayer.min.js hls_js: https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js dash_js: https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js shaka_dash_js: https://cdn.jsdelivr.net/npm/shaka-player/dist/shaka-player.compiled.js flv_js: https://cdn.jsdelivr.net/npm/flv.js/dist/flv.min.js webtorrent_js: https://cdn.jsdelivr.net/npm/webtorrent/webtorrent.min.js default: contents: bilibili: default: page: 1 danmaku: true allowfullscreen: allowfullscreen sandbox: allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups width: 100% max_width: 850px margin: auto xigua: default: autoplay: false startTime: 0 allowfullscreen: allowfullscreen sandbox: allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups width: 100% max_width: 850px margin: auto 使用方法： Aplayer： 1&#123;% mmedia &quot;aplayer&quot; &quot;name:songName&quot; &quot;url:a.mp3&quot; %&#125; Dplayer： 1&#123;% mmedia &quot;dplayer&quot; &quot;url:a.mp4&quot; %&#125; ref：hexo-tag-mmedia 一键回顶部修改Next配置文件（themes&#x2F;next&#x2F;_config.yml），修改以下代码 123456back2top: enable: true # Back to top in sidebar. sidebar: false # Scroll percent label in b2t button. scrollpercent: true 阅读进度条修改Next配置文件（themes&#x2F;next&#x2F;_config.yml），修改以下代码 123456reading_progress: enable: true # Available values: top | bottom position: top color: &quot;#37c6c0&quot; height: 3px 作者头像设置将我们的头像图片放置在 themes/next/source/images 目录下，然后修改 themes/next/_config.yml 12345678# Sidebar Avataravatar: # Replace the default image and set the url here. url: /images/author.jpeg # If true, the avatar will be dispalyed in circle. rounded: false #头像是否设为圆形，否则为矩形 # If true, the avatar will be rotated with the cursor. rotated: true #鼠标放在头像上时是否旋转 添加博客自定义图标博客网站的图标可以在easyicon、bitbug、iconfont等网站选择和制作，然后选择或者创建相应大小的图标文件，放置在 themes/next/sources/images 目录下，然后修改 themes/next/_config.yml 1234567favicon: small: /images/favicon-16.png medium: /images/favicon-32.png apple_touch_icon: /images/favicon-128.png safari_pinned_tab: /images/favicon-512.png #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 增加文章置顶功能12npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章： 123456789---title: 我与Linux的情缘tags: Linuxcategories: - Linuxabbrlink: d773eb13date: 2025-05-11 22:24:04top: true--- 到目前为止，置顶功能已经可以实现了。 不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的 设置置顶标志打开： themes/next/layout/_macro 目录下的post.swig文件，定位到 &lt;div class=&quot;post-meta&quot;&gt;标签下，插入如下代码： 1234&#123;% if post.top %&#125; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; ref: Hexo博客优化之彻底解决博文置顶问题ref: Hexo博客置顶功能优化 定制Next主题的Sidebar_state因为只有true和false 而我想定制在Hexo的NexT主题中仅显示侧边栏的archive部分并隐藏tags 修改Next配置文件 theme/next/layout/_partials/sidebar/site-overview.swig ，注释你想注释掉的，比如我注释掉了 categories 和 tags Step6: 将生成的静态页面部署到 Github 上 具体操作：修改站点配置文件_config.yml的最后部分 1234deploy: type: git repo: https://github.com/k7tmiz/k7tmiz.github.io.git branch: master 要先安装deploy-git，才能用命令部署到GitHub 1npm install hexo-deployer-git --save 然后 123hexo clean #清除之前生成的东西hexo generate #生成静态文章，缩写hexo ghexo deploy #部署文章，缩写hexo d 过一会儿就可以在 yourname.github.io 这个网站看到你的博客了 暂时也想不太起来还改了哪些内容，等想起来或者有扩充我再接着完善文档好吧 还有使用Git分支保存Hexo博客源码到Github有空再更… 2025.5.19日凌晨0:45分先立下Flag(doge) 其他参考的一些帖子ref: 2024年，如何使用 github pages + Hexo + Next 搭建个人博客ref: NexT主题美化ref: Hexo博客优化之Next主题美化","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"我与计算机的故事","slug":"Article-我与计算机的故事","date":"2025-05-11T14:24:04.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/d773eb13.html","permalink":"https://k7tmiz.github.io/posts/d773eb13.html","excerpt":"我是一个行走在文理边界上的旅人，心中燃烧着对计算机世界的恒久热爱。 我的故事，始于北京的家中。 父母工作繁忙，陪伴我的，是家中那两台早早备下的电脑。或许这算得上一种时代的馈赠，让我在懵懂的年纪便与数字世界结缘。那时的热爱，纯粹而天真——利用电脑查找资料、沉浸游戏，服务器、Linux、编程这些深邃的概念，还远在认知的地平线之外。","text":"我是一个行走在文理边界上的旅人，心中燃烧着对计算机世界的恒久热爱。 我的故事，始于北京的家中。 父母工作繁忙，陪伴我的，是家中那两台早早备下的电脑。或许这算得上一种时代的馈赠，让我在懵懂的年纪便与数字世界结缘。那时的热爱，纯粹而天真——利用电脑查找资料、沉浸游戏，服务器、Linux、编程这些深邃的概念，还远在认知的地平线之外。 直至初中岁月，如同推开一扇新世界的大门，我通过视频初识了Linux。好奇心驱使下，我迈出了尝试的第一步。安装的第一个发行版记忆犹新，正是声名远播的 Deepin（大约是2018年，Deepin 15的时代）。那时的DDE桌面尚未如今日般繁复，简洁中自有其魅力。至今，我依然关注着它的每一次重大更新，比如当下最新的Deepin 25，其蜕变令人感慨万千。然而，Deepin并未成为终点。很快，Arch Linux 那种“简单、现代、实用”的理念深深吸引了我。出于谨慎，我首先选择了基于Arch Linux的开箱即用版——Manjaro + KDE。这不仅是一次系统尝试，也意外地开启了我与KDE桌面的长久缘分…自那次与Manjaro的邂逅起，KDE Plasma 便如一位默契的老友，伴我穿梭于数字世界的每一次探索，直至今日。 至于最终何时、因何（是Arch那极具设计感的图标，还是当时Manjaro偶尔的“滚挂”风波？记忆已有些模糊）彻底投入Arch Linux的怀抱… 总之从那时起，我便以Arch Linux为主力系统，同时广泛涉猎其他发行版（如Kali, elementaryOS, PopOS, FydeOS等，Mint则只在虚拟机中短暂停留），已难以精确追溯。正是在这个阶段，我的探索触角延伸到了服务器领域和编程世界。初中学习了C++，并在初三毕业的暑假拥抱了Python。服务器系统方面，CentOS 7曾是我的挚爱，但随着其发展路线的风云变幻，稳定可靠的Debian成为了我的最终选择，从9到12版本，皆曾亲历。 步入高中，疫情时代网课需求骤增，而Linux对腾讯会议等工具的支持尚显稚嫩。加之学业日益繁重，能够自由“折腾”的时间被大大压缩。然而，热爱并未熄灭。那台老旧的机器上，Arch Linux 与 Windows 的双系统依然共存，我仍会抓住间隙，执行那熟悉的sudo pacman -Syu指令。令人欣慰的是，直至高三毕业，它竟也未曾“滚挂”，堪称一段稳定的陪伴。 大学伊始，新电脑在手。作为文科生，且彼时电脑的主要任务是游戏，Windows自然成为主角，机器也一度沉寂。然而转机总在不经意间降临：一次Windows关机后并未真正沉睡，竟在背包中“空转”月余。待到再次启用，迎接我的却是花屏的桌面。进入PE环境排查，确认是系统问题，光是官方驱动包的安装调试就耗费了一整天。这次不甚愉快的经历，叠加了Windows强制更新、“假休眠”导致风扇狂转、以及种种被当作“宝宝”般过度保护的行为，终于唤醒了我对Linux自由精神的深切怀念。 行动迅捷。购入一块新硬盘，十分钟内Arch Linux便已部署完毕——那熟悉的气息瞬间回归。但世界也在前进：KDE经历重大版本迭代，Steam正大力重塑Linux游戏生态，新技术层出不穷。我过往积累的经验，竟有许多已不再适用。这非但没有令我沮丧，反而重新点燃了强烈的探索欲。 再次深入，我发现一切已然不同：原生Linux版微信不再是奢望，QQ对Linux用户也一视同仁；Valve凭借搭载Arch系SteamOS的SteamDeck掌机，以及其基于Wine精心打造的Proton兼容层，极大地繁荣了Linux的游戏生态；更因UOS在政企领域的广泛部署，国内Linux用户普遍受益。如今在Linux下畅玩游戏，早已不是一件值得自嘲的“壮举”。 这激起了我新一轮广泛体验的热情：openSUSE Tumbleweed的优雅滚动、Ubuntu的普及生态、Fedora的前沿特性、openSUSE Leap的稳健、Debian 12的纯粹、NixOS的革命性理念……有趣的是，尽管我频繁使用基于Debian的发行版及其衍生产品，也管理过众多搭载Debian/Ubuntu的服务器，桌面端却始终未曾真正深入体验过原生Debian。 如今，我的数字世界由两台电脑承载： 轻薄本： Arch Linux（主力）, FydeOS, Hackintosh 游戏本： Arch Linux（主力）, openSUSE Tumbleweed, Fedora 42, Debian Testing, 以及暂时保留的 Windows 11（最后的妥协与备选） 本文完善于2025.6.25日 2025.7.20日,我的openSUSE Tumbleweed在一次zypper dup中因为驱动问题惨烈牺牲,借此机会我也把系统数量给精简成为了三个,Arch Linux,Fedora42和Windows11","categories":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/categories/Article/"}],"tags":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/tags/Article/"}]},{"title":"西班牙语简单过去时","slug":"Study-西班牙语简单过去时","date":"2025-05-11T11:01:32.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/b8718f34.html","permalink":"https://k7tmiz.github.io/posts/b8718f34.html","excerpt":"西班牙语简单过去时 (Pretérito Indefinido &#x2F; Pretérito Perfecto Simple)简单过去时用于描述在过去特定时间点完成的、一次性的动作或事件。 一、规则动词变位","text":"西班牙语简单过去时 (Pretérito Indefinido &#x2F; Pretérito Perfecto Simple)简单过去时用于描述在过去特定时间点完成的、一次性的动作或事件。 一、规则动词变位1. -AR 结尾动词(例如: hablar - 说话)词根 + 以下词尾： Yo: -é Tú: -aste Él&#x2F;Ella&#x2F;Usted: -ó Nosotros&#x2F;as: -amos (与现在时nosotros形式相同) Vosotros&#x2F;as: -asteis Ellos&#x2F;Ellas&#x2F;Ustedes: -aron 表格：cantar (唱歌) 人称 变位 Yo canté Tú cantaste Él&#x2F;Ella&#x2F;Usted cantó Nosotros&#x2F;as cantamos Vosotros&#x2F;as cantasteis Ellos&#x2F;Ellas&#x2F;Ustedes cantaron 2. -ER 结尾动词(例如: comer - 吃)词根 + 以下词尾： Yo: -í Tú: -iste Él&#x2F;Ella&#x2F;Usted: -ió Nosotros&#x2F;as: -imos Vosotros&#x2F;as: -isteis Ellos&#x2F;Ellas&#x2F;Ustedes: -ieron 表格：beber (喝) 人称 变位 Yo bebí Tú bebiste Él&#x2F;Ella&#x2F;Usted bebió Nosotros&#x2F;as bebimos Vosotros&#x2F;as bebisteis Ellos&#x2F;Ellas&#x2F;Ustedes bebieron 3. -IR 结尾动词(例如: vivir - 生活)词根 + 以下词尾 (与-ER动词词尾相同)： Yo: -í Tú: -iste Él&#x2F;Ella&#x2F;Usted: -ió Nosotros&#x2F;as: -imos (与现在时nosotros形式相同) Vosotros&#x2F;as: -isteis Ellos&#x2F;Ellas&#x2F;Ustedes: -ieron 表格：escribir (写) 人称 变位 Yo escribí Tú escribiste Él&#x2F;Ella&#x2F;Usted escribió Nosotros&#x2F;as escribimos Vosotros&#x2F;as escribisteis Ellos&#x2F;Ellas&#x2F;Ustedes escribieron 二、注意事项 重音：注意 yo 和 él/ella/usted 形式的重音符号，它们是区分人称和时态的关键。 Nosotros 形式： 对于 -ar 和 -ir 结尾的动词，nosotros 形式在简单过去时和现在时中是相同的 (e.g., hablamos, vivimos)。需要根据上下文判断时态。 对于 -er 结尾的动词，nosotros 形式在简单过去时 (-imos) 和现在时 (-emos) 是不同的 (e.g., comimos vs comemos)。 用途： 表示在过去特定时间点开始并结束的动作。 叙述一系列连续发生的过去动作。 表示一个中断另一个正在进行的过去动作的动作 (被打断的动作通常用过去未完成时)。 三、不规则动词不规则动词通常有不规则的词根，但许多共享一套特殊的词尾。 常用不规则词尾组 (用于强变化词根): Yo: -e Tú: -iste Él&#x2F;Ella&#x2F;Usted: -o Nosotros&#x2F;as: -imos Vosotros&#x2F;as: -isteis Ellos&#x2F;Ellas&#x2F;Ustedes: -ieron (若词根以 j 结尾, 则为 -eron) 1. “超级”不规则 Ser (是) &#x2F; Ir (去) (变位完全相同) 人称 Ser &#x2F; Ir Yo fui Tú fuiste Él&#x2F;Ella fue Nosotros fuimos Vosotros fuisteis Ellos fueron Dar (给) (词尾类似-ER&#x2F;-IR，但无重音) 人称 Dar Yo di Tú diste Él&#x2F;Ella dio Nosotros dimos Vosotros disteis Ellos dieron Ver (看) (词尾类似-ER&#x2F;-IR，但无重音) 人称 Ver Yo vi Tú viste Él&#x2F;Ella vio Nosotros vimos Vosotros visteis Ellos vieron 2. 词根变化 (使用上述”常用不规则词尾组”)a) U-组 (词根含 -u-) 原形 词根 Yo Tú Él&#x2F;Ella Nosotros Vosotros Ellos Tener tuv- tuve tuviste tuvo tuvimos tuvisteis tuvieron Estar estuv- estuve estuviste estuvo estuvimos estuvisteis estuvieron Andar anduv- anduve anduviste anduvo anduvimos anduvisteis anduvieron Poner pus- puse pusiste puso pusimos pusisteis pusieron Poder pud- pude pudiste pudo pudimos pudisteis pudieron Saber sup- supe supiste supo supimos supisteis supieron b) I-组 (词根含 -i-) 原形 词根 Yo Tú Él&#x2F;Ella Nosotros Vosotros Ellos Venir vin- vine viniste vino vinimos vinisteis vinieron Querer quis- quise quisiste quiso quisimos quisisteis quisieron Hacer hic- hice hiciste hizo hicimos hicisteis hicieron *注意: `hacer` 的 él/ella/usted 形式是 `hizo` (c -&gt; z 保持发音)* c) J-组 (词根含 -j-, ellos&#x2F;as&#x2F;Uds. 词尾为 -eron) 原形 词根 Yo Tú Él&#x2F;Ella Nosotros Vosotros Ellos Decir dij- dije dijiste dijo dijimos dijisteis dijeron Traer traj- traje trajiste trajo trajimos trajisteis trajeron Conducir conduj- conduje condujiste condujo condujimos condujisteis condujeron (-ducir结尾) 3. 第三单复数词根元音变化 (-IR 动词)仅在 él/ella/usted 和 ellos/ellas/ustedes 形式发生词根元音变化 (e -&gt; i; o -&gt; u)。其他形式规则。 e -&gt; i: pedir (请求), sentir (感觉), seguir (跟随), preferir (偏爱), repetir (重复) Pedir: pedí, pediste, pidió, pedimos, pedisteis, pidieron Sentir: sentí, sentiste, sintió, sentimos, sentisteis, sintieron o -&gt; u: dormir (睡觉), morir (死) Dormir: dormí, dormiste, durmió, dormimos, dormisteis, durmieron Morir: morí, moriste, murió, morimos, moristeis, murieron 4. 正字法变化 (仅 Yo 形式，保持发音)其他形式规则。 -car -&gt; -qué: buscar (寻找) -&gt; yo busqué -gar -&gt; -gué: llegar (到达) -&gt; yo llegué -zar -&gt; -cé: empezar (开始) -&gt; yo empecé 5. i -&gt; y 变化 (第三单复数，词根以元音结尾)当词根以元音结尾，且后面是 -ió 或 -ieron 时，i 变为 y。 leer (阅读): leí, leíste, leyó, leímos, leísteis, leyeron oír (听见): oí, oíste, oyó, oímos, oísteis, oyeron creer (相信): creí, creíste, creyó, creímos, creísteis, creyeron -uir 结尾动词 (e.g., construir - 建造): construí, construiste, construyó, construimos, construisteis, construyeron 记忆提示： 将不规则动词分组记忆。 注意强变化词根的共同词尾。 多加练习，通过语境熟悉其用法。","categories":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/categories/Study/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/tags/Study/"},{"name":"Spanish","slug":"Spanish","permalink":"https://k7tmiz.github.io/tags/Spanish/"}]},{"title":"西班牙语陈述式过去未完成时","slug":"Study-西班牙语陈述式过去未完成时","date":"2025-05-11T10:36:32.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/567971b1.html","permalink":"https://k7tmiz.github.io/posts/567971b1.html","excerpt":"西班牙语陈述式过去未完成时 (Pretérito Imperfecto de Indicativo)过去未完成时主要用于描述过去持续的、习惯性的动作，或对过去的背景、状态、人物进行描述，相当于英语中的 “used to”, “would (for habitual past actions)”, 或 “was&#x2F;were + -ing” (描述背景或持续动作时)。 一、规则动词变位","text":"西班牙语陈述式过去未完成时 (Pretérito Imperfecto de Indicativo)过去未完成时主要用于描述过去持续的、习惯性的动作，或对过去的背景、状态、人物进行描述，相当于英语中的 “used to”, “would (for habitual past actions)”, 或 “was&#x2F;were + -ing” (描述背景或持续动作时)。 一、规则动词变位过去未完成时的规则动词变位非常简单，只有两套词尾。 1. -AR 结尾动词词根 + 以下词尾： Yo: -aba Tú: -abas Él&#x2F;Ella&#x2F;Usted: -aba Nosotros&#x2F;as: -ábamos (注意重音) Vosotros&#x2F;as: -abais Ellos&#x2F;Ellas&#x2F;Ustedes: -aban 例如：hablar (说话) 人称 变位 Yo hablaba Tú hablabas Él&#x2F;Ella&#x2F;Usted hablaba Nosotros&#x2F;as hablábamos Vosotros&#x2F;as hablabais Ellos&#x2F;Ellas&#x2F;Ustedes hablaban 2. -ER 和 -IR 结尾动词这两类动词在过去未完成时中使用相同的词尾。词根 + 以下词尾： Yo: -ía Tú: -ías Él&#x2F;Ella&#x2F;Usted: -ía Nosotros&#x2F;as: -íamos (注意重音) Vosotros&#x2F;as: -íais Ellos&#x2F;Ellas&#x2F;Ustedes: -ían 例如：comer (吃, -ER) 人称 变位 Yo comía Tú comías Él&#x2F;Ella&#x2F;Usted comía Nosotros&#x2F;as comíamos Vosotros&#x2F;as comíais Ellos&#x2F;Ellas&#x2F;Ustedes comían 例如：vivir (生活, -IR) 人称 变位 Yo vivía Tú vivías Él&#x2F;Ella&#x2F;Usted vivía Nosotros&#x2F;as vivíamos Vosotros&#x2F;as vivíais Ellos&#x2F;Ellas&#x2F;Ustedes vivían 二、注意事项 重音符号： -AR 动词的 nosotros 形式 (-ábamos) 的 a 上有重音。 -ER 和 -IR 动词的所有形式的 i 上都有重音 (-ía, -ías, -ía, -íamos, -íais, -ían)。 用途： 描述过去习惯性的动作 (e.g., Cuando era niño, jugaba en el parque. - 当我是个孩子时，我常在公园玩。) 描述过去的背景、情景、状态 (e.g., Hacía sol y los pájaros cantaban. - 当时阳光明媚，鸟儿在歌唱。) 描述人的年龄、时间、天气等 (e.g., Tenía veinte años. - 他&#x2F;她当时二十岁。 Eran las tres. - 当时是三点。) 描述两个或多个同时发生的持续性过去动作 (e.g., Mientras yo cocinaba, él leía. - 当我做饭的时候，他在读书。) 用于礼貌地提出请求 (较少见，但可能出现，如 Quería pedirle un favor. - 我想请您帮个忙。) 三、不规则动词在过去未完成时中，只有 三个 真正的不规则动词。这是这个时态相对简单的一个原因。 1. Ser (是) 人称 变位 Yo era Tú eras Él&#x2F;Ella&#x2F;Usted era Nosotros&#x2F;as éramos Vosotros&#x2F;as erais Ellos&#x2F;Ellas&#x2F;Ustedes eran 2. Ir (去) 人称 变位 Yo iba Tú ibas Él&#x2F;Ella&#x2F;Usted iba Nosotros&#x2F;as íbamos Vosotros&#x2F;as ibais Ellos&#x2F;Ellas&#x2F;Ustedes iban 3. Ver (看见)(严格来说，ver 保留了词根的 e，然后加上了规则的 -ía 结尾，但通常被列为不规则) 人称 变位 Yo veía Tú veías Él&#x2F;Ella&#x2F;Usted veía Nosotros&#x2F;as veíamos Vosotros&#x2F;as veíais Ellos&#x2F;Ellas&#x2F;Ustedes veían 总结：过去未完成时相对规则，主要记住两套词尾和三个不规则动词即可。重点在于理解其使用场景，以便与简单过去时区分开来。","categories":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/categories/Study/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/tags/Study/"},{"name":"Spanish","slug":"Spanish","permalink":"https://k7tmiz.github.io/tags/Spanish/"}]},{"title":"云南旅游攻略4天2025.5.1","slug":"Travel-云南旅游攻略4天2025-5-1","date":"2025-05-10T13:54:06.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/4a1e9301.html","permalink":"https://k7tmiz.github.io/posts/4a1e9301.html","excerpt":"云南旅游攻略昆明部分昆明部分是自己做的 大理大部分是购买的，秉承着Opensource的原则全部分享出来","text":"云南旅游攻略昆明部分昆明部分是自己做的 大理大部分是购买的，秉承着Opensource的原则全部分享出来 其实还有好多好多照片都发到朋友圈去了 这些图片都是随便节选的…当然也是从朋友圈下载下来的 因为压缩，体积图片比较小嘻嘻 昆明双塔 滇池 翠湖 昆明老街 西山索道(100) 斗南花市 陆军讲武堂 Day1 5月2日昆明站－昆明老街(东方书店－纸片楼－对月楼酒店)－(非正常咖啡馆 选去 打卡点)－黄公东街－翠湖公园－陆军讲武堂－西山索道－海洪湿地公园(滇池)－捞鱼河湿地公园(滇池)－斗南花市－南强集市 视情况加入云南师大(主要是不好进去 管的严) 最后还是没进去 from 25.5.10 忘了在哪拍的了… 后几张都是昆明的滇池 Day2 5月3日有可能去海埂大坝看一眼日出 十点高铁－大理 大理 洱海 苍山(30) S弯 理想邦 大理古城 喜洲古镇 沙溪古镇 双廊古镇 南诏风情岛 崇圣寺三塔 Day2 5月3号大理行－下午大理站－磻溪村（S湾）-喜洲古镇（扎染+稻田）-大理古城 下午打车前往磻溪村，租个自行车游览网红S湾生态廊道（游览时间2.5小时）（定位马久邑或磻溪村）洱海生态廊道全程差不多有50公里，精华地段就是马久邑附近和磻溪村附近，很多比较火的视频和图片都是这两段。线路大概为：马久邑-富美邑-下波淜-磻溪村-古生村，沿途有很多咖啡厅，玩累了可以进去坐坐，享受一下洱海边的风景。美食推荐：磻溪村附近（信达小吃，望海人家），马久邑附近(二两小吃店白族庭院私房菜，原生态白族农家菜），古生村（村里大青树附近有很多本地特色小吃）之后骑行抵达喜洲古镇，游览线路大致为：第一站：大理路边野餐咖啡画廊第二站：我在洱海有块田！超级大的拍照基地，麦田很大，人也没有喜洲古镇里的多！有很多出片的机位，有火车，有秋千都很好看！第三站：白族扎染 推荐“喜蓝扎染”，做衣服。扎染的步骤是先选定你做的款式，再和老板商量确认设计想法和实现步骤。店员会先辅助你完成手工部分后，进行1泡水&#x2F;去碘伏2染色3 冲洗4 氧化5 皂洗6 清洗7 晒干，整个过程根据你选择的产品难易程度决定，体验大概在30分钟到一小时。就可以获得一件亲自设计扎染的艺术品啦喜洲还有非遗–瓦猫，各种类型的寓意都有，可以挑一个喜洲美食推荐:喜洲粑粑(一定要尝尝，当地特色)，四方街食店，口未江湖，喜洲老冰棍，喜酒坊小吃店吃完后夜游大理古城游览路线指南:床单艺术厂-五华楼（出片，缺点人多）-红龙井-关帝庙-文殊庙-天主教堂-玉洱园 -洋人街-电影博物馆-基督教堂 住宿：大理古城 洱海 Day3 5月4号龙龛码头-云想山（路极公园）-理想邦–文笔村日落 早上第一站龙龛码头（游览时间2小时）， 大理最美码头之一，还有水中红杉树拍照很美。如果想体验洱海日出，就需要早一点，日出时间：早上7:30-8:00左右，可以稍微提前一点去占位置，享受等待日出的过程。位置导航：直接导航阳光便利店，距离海边大概只有200米之后电动车前往云想山-路极公园—亚洲第二国内唯一的路极（游览时间2.5小时）无想，无限的放空，任凭暮霭一点一点席卷天边，大理城的万家灯火星星点点，陆续绽放。沉溺在这无边的夜色之中。悬崖礼堂 白色的三角礼堂在蓝天与洱海的背景下特别唯美，还能看到远处的风车山咖啡店 一楼有个有着大大落地窗，很好拍，二楼是2188落日餐厅，价格有点贵，味道也一般般，三楼是天台，有一个镜面地板，白天可以拍自己的倒影，晚上看夜景一览无余山顶草坪 在咖啡馆旁边的草坡上，草坪不大，结合天空的云朵可以拍出很好玩的照片路极 是来自新西兰的无动力车，自己可以控制速度沿着山道开路极门票：大人188元3次 分叉口选右边是缓长的道，左边道更刺激好玩开到山脚可以坐缆车或者电瓶车上山顶下午前往圣托里尼·理想邦（游览时间1小时）推荐打卡：理想的花园！它藏在圣托里尼岛里，浪漫氛围拉满拍照点：小木屋、天空之镜、秋千、仙人掌、花门、大片的绣球花和小雏菊门票：135元&#x2F;2人，单人票是68元&#x2F;人美食推荐：烟云融合菜餐厅·川滇菜、天边的云Sky Cloud 海景餐厅最后前往文笔村，抵达前往海之礼堂，感受那里的壮丽海景。晚上，在海之礼堂边的悬崖餐厅品尝美食，欣赏美丽的日落。打卡彩虹公路，这里有种日本镰仓的感觉。无论是漫步还是骑行，都能让你放松心情。午餐时间，推荐到推荐餐厅：青寂日落海景餐厅 六阅海东方悬崖海景餐厅备选体验景点：罗荃半岛旁的理记咖啡（游览时间1小时）刘亦菲同款【理记先生】，是一辆超长的绿皮车，摊主推荐了“老板的一生”和“苍山梅烦恼”老板的一生：是一款生椰dirty，有苦有甜，感觉比之前用冰博客做的更好喝些。苍山梅烦恼：梅子味的冰美式，带点酸，果酸和咖啡的酸融合在一起，不会太酸也尝不到偏甜的糖浆味 洱海 Day4 5月5号 回昆明苍山索道（感通）-大理站 打车前往感通索道，苍山景点最集中的一条索道，全长2630米，全程25分钟，乘坐该缆车，可仰望苍山雪峰俯瞰百里洱海大理古城。沿途有珍珑棋局清碧溪苍山大峡谷玉带云游路，除索道外，还有千年古刹感通寺、“最美尼姑庵”寂照庵。感通索道详细攻略门票价格：全程窗口115，网络110，游玩线路：感通全程索道往返，约2.5小时1检票后乘索道至上站2到上站后游玩珍珑棋局、玉带路、苍山大峡谷、清碧溪3从感通索道下山4下山后游玩感通寺、寂照庵（可在庵内吃斋饭） 大理伴手礼 大理伴手礼推荐：白族扎染 瓦猫 白族甲马 剑川木雕 白族羊毛毡 鹤庆银器 下关沱茶 雕梅酒 洱宝话梅 乳扇 鲜花饼 鹤庆米糕大理古城北门菜市场平等路上山货特产批发：普洱茶、果酒、野生菌、蜂蜜 小粒咖啡都不错大理古城土特产最多，都可以适当讲价。先尝后买。下关火车站旁边的有点贵。","categories":[{"name":"Travel","slug":"Travel","permalink":"https://k7tmiz.github.io/categories/Travel/"}],"tags":[{"name":"Travel","slug":"Travel","permalink":"https://k7tmiz.github.io/tags/Travel/"}]},{"title":"ArchLinux安装后指南","slug":"Linux-ArchLinux安装后指南","date":"2025-04-23T11:06:38.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/f48c939a.html","permalink":"https://k7tmiz.github.io/posts/f48c939a.html","excerpt":"root登录联网,基于之前装的NetworkManager 1systemctl start NetworkManager #这里必须大写","text":"root登录联网,基于之前装的NetworkManager 1systemctl start NetworkManager #这里必须大写 开机自启动 1systemctl enable NetworkManager 1nmtui 触摸板驱动 1pacman -S xf86-input-synaptics X11 1pacman -S xorg Wayland 1pacman -S wayland xorg-xwayland NVIDIA 多装一个 xorg-xrandr 开源中文字体安装 1pacman -S ttf-dejavu wqy-microhei wqy-zenhei 安装sudo 1pacman -S sudo 添加用户并且提权添加用户 1useradd -m -G wheel Bruno 密码 1passwd Bruno visudo 或者 nano /etc/sudoers 找到#%wheel ALL&#x3D;(ALL)ALL 按X去掉# :wq 保存退出 重启 1reboot 重启进来用user登录 intel核显驱动已经过时，不要装这个 xf86-video-intel 是 Intel 的老驱动，已多年不维护，主要为 老款 Intel HD Graphics（Sandy Bridge 及以前） 设计 1sudo pacman -S xf86-video-intel 开源驱动 1sudo pacman -S mesa libva-intel-driver vulkan-intel 使用wayland的话推荐装 1sudo pacman -S intel-media-driver 安装桌面环境 本人是KDE的忠实教徒，如需其他桌面，请自行搜索 Plasma 1sudo pacman -S plasma kde-applications 最小Plasma桌面 plasma-meta 锁屏 1sudo pacman -S sddm 向 &#x2F;etc&#x2F;sddm.conf 中追加下面的内容。其中，QT_FONT_DPI 的值为你的 DPI 缩放数值 (计算方式是 96 乘以你的缩放比例，比如 150% 缩放则为 144)。QT_SCREEN_SCALE_FACTORS 的值为你需要的 DPI 缩放比例（比如，若为 150% 就直接填 1.5）,同时 sddm 登录界面不会自动将数字小键盘打开, sddm 的鼠标指针也可以更改一下 123456789[General]GreeterEnvironment=QT_SCREEN_SCALE_FACTORS=1.5,QT_FONT_DPI=144# 打开数字小键盘Numlock=on# 修改鼠标指针，加入下面的设置[Theme]CursorTheme=breeze_cursors 修改完 HiDPI 设置之后可能需要重新启动系统。 开机自启动设置 1systemctl enable sddm 笔记本电源管理 1sudo pacman -S power-profiles-daemon (需要启用 power-profiles-daemon 服务) 一些驱动音频 1sudo pacman -S alsa-utils pipewire pipewire-alsa pipewire-pulse 有可能装完还是用不了，我这里为了方便，直接一站式，有可能需要装sof-firmware–开源音频驱动 中文输入法 1sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt Wikipedia中文词库 1sudo pacman -S fcitx5-pinyin-zhwiki 搜狗拼音输入法的词库 1yay -S fcitx5-pinyin-sougou 编辑 ~/.xprofile 和 /etc/environment文件 1234567export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx fcitx5类似微软拼音的皮肤1sudo pacman -S fcitx5-material-color zsh通过pacman安装zsh，然后将此文件的内容覆盖到~&#x2F;.zshrc中，完成配置。 需要事先安装git命令 使用chsh -s /bin/zsh来更改当前用户的默认终端 ref:Archlinux 安装笔记 rEFInd – 多系统引导工具安装 refind包 1sudo pacman -S refind 执行安装命令: 1refind-install 然后进入 boot/EFI/refind 将此文件中的内容覆盖 refind.conf 需要安装darkmini的refind主题才能正常使用，如果不想安装主题或者不想用darkmini，就把最后一行 include themes/darkmini/theme-mini.conf 注释掉或者修改成你想使用的主题 ref: rEFInd ArchLinuxCN镜像源以及AUR编辑&#x2F;etc&#x2F;pacman.conf 12[archlinuxcn]Server = https://mirrors.cernet.edu.cn/archlinuxcn/$arch 之后通过以下命令安装 archlinuxcn-keyring 包导入 GPG key 1sudo pacman -Sy archlinuxcn-keyring 安装AUR包管理器 1sudo pacman -Sy yay paru","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"}]},{"title":"Archlinux安装指南","slug":"Linux-ArchLinux安装指南-2025-4-19","date":"2025-04-19T14:28:32.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/a907d758.html","permalink":"https://k7tmiz.github.io/posts/a907d758.html","excerpt":"初步配置联网 1dhcpcd/iwctl","text":"初步配置联网 1dhcpcd/iwctl iwctl:device liststation ‘device’ scanstation ‘device’ get-networksstation ‘device’ connect ‘wlan’ 更新ntp服务器 1timdatectl set-ntp true 分区及挂载 此处演示p1:EFI p2:&#x2F;mnt p3:swap 查看目前磁盘，分区状况1lsblk 分区 1fdisk /dev/sdX / fdisk /dev/nvme0n1 m 查看命令n 新建一个分区g 转换GPTt 更改分区类型：EFI:1 SWAP:19 Linux:20 格式化分区为FAT32格式 1mkfs.fat -F32 /dev/nvme0n1p1 格式化分区为EXT4格式 1mkfs.ext4 /dev/nvme0n1p2 格式化分区为SWAP格式 1mkswap /dev/nvme0n1p3 开启SWAP 1swapon /dev/nvme0n1p3 挂载根分区 1mount /dev/nvme0n1p2 /mnt 新建Boot文件夹 1mkdir /mnt/boot 新建Home文件夹 1mkdir /mnt/home 挂载Boot分区 1mount /dev/nvme0n1p1 /mnt/boot 如果有的话一个分区为了Home分区 mount /dev/nvme0n1px /mnt/home 开始安装编辑镜像源 1nano /etc/pacman.d/mirrorlist 拉取镜像 1pacstrap /mnt base base-devel linux linux-firmware vi nano 更新分区表 1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab 检查分区表 1cat /mnt/etc/fstab 下载基本软件 1pacman -S vim networkmanager dhcpcd 切换到本地 1arch-chroot /mnt 更新本地时间 1ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 1hwclock --systohc 编辑locale.gen 1nano /etc/locale.gen 找到 en_US.UTF-8 和 zh_CN.UTF-8 去掉前面的# 更新 1locale-gen 编辑locale.conf文件 1nano /etc/locale.conf 写入 LANG=en_US.UTF-8 设置root密码 1passwd 不显示密码是正常情况 下载基本软件 1pacman -S dialog wpa_supplicant ntfs-3g 安装CPU驱动intel 1pacman -S intel-ucode amd 1pacman -S amd-ucode 安装引导 1pacman -S grub efibootmgr 多系统引导 1pacman -S os-prober UEFI引导 1grub-install --target=x86_64-efi --efi-directory=/boot --bootloader=ArchLinux 更新grub 1grub-mkconfig -o /boot/grub/grub.cfg 至此 安装结束退出 1exit 重启 1reboot","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"}]},{"title":"Switch-SteamLibrary","slug":"Linux-Switch-SteamLibrary","date":"2025-04-19T14:28:32.000Z","updated":"2025-08-21T18:03:56.092Z","comments":true,"path":"posts/2a1b98b0.html","permalink":"https://k7tmiz.github.io/posts/2a1b98b0.html","excerpt":"Switch-SteamLibrary 这是一个用于电脑中有多Linux系统，并且希望自己的游戏统一存放在NTFS格式盘的小脚本。它旨在可以让你的多Linux系统，包括Windows都可以调用一个同一个Steam游戏库的小脚本。 使用说明:","text":"Switch-SteamLibrary 这是一个用于电脑中有多Linux系统，并且希望自己的游戏统一存放在NTFS格式盘的小脚本。它旨在可以让你的多Linux系统，包括Windows都可以调用一个同一个Steam游戏库的小脚本。 使用说明:1git clone https://github.com/k7tmiz/Switch-SteamLibrary.git 1cd Switch-SteamLibrary 使用文本编辑器进行编辑1sudo vim setup_steam_link.sh STEAM_DIR：代表你当前系统steam所在的地址 SHARED_DIR：代表你想调用的游戏库地址 只须调整这两个参数便可以正常使用该脚本 提权1chmod +x ./setup_steam_link.sh 运行1./setup_steam_link.sh 参考：Proton-Wiki","categories":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"MSI-PERKEYRGB","slug":"Tech-MSI-PERKEYRGB","date":"2025-04-19T14:28:32.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/5a88bde.html","permalink":"https://k7tmiz.github.io/posts/5a88bde.html","excerpt":"MSI-PERKEYRGB 适用于我MSI-GP68HX的键盘RGB调光的git项目 下面是Github的项目地址： msi-perkeyrgb","text":"MSI-PERKEYRGB 适用于我MSI-GP68HX的键盘RGB调光的git项目 下面是Github的项目地址： msi-perkeyrgb 安装教程这里就掠过简单用法Steady Color：稳定颜色1msi-perkeyrgb --model &lt;MSI model&gt; -s &lt;COLOR&gt; Preset：内置预设(–list-presets)1msi-perkeyrgb --model &lt;MSI model&gt; -p &lt;preset&gt; 高级用法不多赘述 个人用不到 个人电脑键盘预设配色如下： aqua chakra default disco drain freeway rainbow-split roulette 如果你的电脑也没有被录入的话 可以通过id的方式进行使用。注意：这里是十六进制的数字 –id VENDOR_ID:PRODUCT_ID 1例 sudo msi-perkeyrgb --id 1038:113a -p rainbow-split","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]},{"title":"Nativefier 使用教程","slug":"Tech-Nativefier使用教程","date":"2025-04-19T14:28:32.000Z","updated":"2025-08-21T18:03:56.093Z","comments":true,"path":"posts/b56059f9.html","permalink":"https://k7tmiz.github.io/posts/b56059f9.html","excerpt":"Nativefier 使用教程基于electron的打包软件nativefier -n &lt;打包后的应用名称&gt; -p &lt;程序兼容的平台&gt; —-arch &lt;架构&gt; —- weight &lt;窗口宽度&gt; —-height &lt;窗口高度&gt; &lt;网页URL&gt;","text":"Nativefier 使用教程基于electron的打包软件nativefier -n &lt;打包后的应用名称&gt; -p &lt;程序兼容的平台&gt; —-arch &lt;架构&gt; —- weight &lt;窗口宽度&gt; —-height &lt;窗口高度&gt; &lt;网页URL&gt;实例（Eshelper）nativefier -n Eshelper -p linux –arch x64 –width 1024 –height 768 –tray--disable-dev-tools https://www.esdict.cn/ #如果想让程序可以后台运行，可以增加参数——tray #如果不想在使用时可以调出chrome的开发者工具，可以增加参数——disable-dev-tools #如果想控制程序在同一时间只能运行一个实例，则增加参数——single-instance .desktop文件（Linux下启动文件）[Desktop Entry] # type关键字如上所述 Type&#x3D;Application # 本文件所遵循的桌面项规范版本 Version&#x3D;1.0 # 应用程序的名称 Name&#x3D;jMemorize # 显示为工具提示的注释 Comment&#x3D;Flash card based learning tool # 可执行文件所在的目录 Path&#x3D;&#x2F;opt&#x2F;jmemorise # 可执行文件，可以带参 Exec&#x3D;jmemorize # 图标名称 Icon&#x3D;jmemorize # 应用程序是否需要运行在终端中 Terminal&#x3D;false # 本桌面项将显示在哪些分类中 Categories&#x3D;Education;Languages;Java; .desktop文件存放位置&#x2F;usr&#x2F;share&#x2F;applications&#x2F;","categories":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"}],"tags":[{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"}]}],"categories":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/categories/Article/"},{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/categories/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/categories/Tech/"},{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/categories/Study/"},{"name":"Travel","slug":"Travel","permalink":"https://k7tmiz.github.io/categories/Travel/"}],"tags":[{"name":"Article","slug":"Article","permalink":"https://k7tmiz.github.io/tags/Article/"},{"name":"Linux","slug":"Linux","permalink":"https://k7tmiz.github.io/tags/Linux/"},{"name":"Tech","slug":"Tech","permalink":"https://k7tmiz.github.io/tags/Tech/"},{"name":"Study","slug":"Study","permalink":"https://k7tmiz.github.io/tags/Study/"},{"name":"Spanish","slug":"Spanish","permalink":"https://k7tmiz.github.io/tags/Spanish/"},{"name":"Travel","slug":"Travel","permalink":"https://k7tmiz.github.io/tags/Travel/"}]}